filter(branch_id %in% c("o", "j")) %>%
summarise(MRCA = sum(corr_branch_lengths, na.rm = TRUE)) %>%
pull(MRCA)
per_sample_totals_PL$MRCA <- MRCA_length_PL
# Remove MRCA mutation load per sample
per_sample_totals_PL <- per_sample_totals_PL %>%
mutate(total_corr_branch_length_wo_MRCA = total_corr_branch_length - MRCA)
View(res_P856_v2)
res_P856_v2$upper_node_lims$mean
res_P856_v2$upper_node_lims$ub95
res_P856_v2$upper_node_lims$lb95
View(per_sample_totals_PL)
View(res_P856_v2)
View(x)
res_P856_v2[["ultratree"]][["agedf"]]
res_P856_v2[["ultratree"]][["edge"]]
MRCA_length_PL
# Remove MRCA mutation load per sample
per_sample_totals_PL <- per_sample_totals_PL %>%
mutate(total_corr_branch_length_wo_MRCA = total_corr_branch_length - MRCA)
# Compute latency time
latency_time_P856_PL <- age_P856_diag - 6.100166
# Compute mutation rate *per malignant sample*
per_sample_totals_PL <- per_sample_totals_PL %>%
mutate(mutation_rate_post_expansion = total_corr_branch_length_wo_MRCA / latency_time_P856_PL)
# Get mean and SE
mean_mutation_rate_post_expansion_P856_PL <- mean(per_sample_totals_PL$mutation_rate_post_expansion, na.rm = TRUE)
se_mutation_rate_post_expansion_P856_PL <- sd(per_sample_totals_PL$mutation_rate_post_expansion, na.rm = TRUE) /
sqrt(sum(!is.na(per_sample_totals_PL$mutation_rate_post_expansion)))
mean_mutation_rate_post_expansion_P856_PL
se_mutation_rate_post_expansion_P856_PL
# Mutation rate of pre-expansion cell
mutation_rate_pre_expansion_P856_PL <- MRCA_length_PL/res_P856$upper_node_lims$mean[1]
mutation_rate_pre_expansion_P856_PL
# Keep only the malignant samples of BM
x_long_mal_BM <- x_long %>%
filter(samples %in% P856_malignant_cells_BM)
# Mutation rate of pre-expansion cell
mutation_rate_pre_expansion_P856_PL <- MRCA_length_PL/6.100166
mutation_rate_pre_expansion_P856_PL
# Keep only the malignant samples of BM
x_long_mal_BM <- x_long %>%
filter(samples %in% P856_malignant_cells_BM)
# Sum corr_branch_lengths across ALL rows where each sample appears
per_sample_totals_BM <- x_long_mal_BM %>%
group_by(samples) %>%
summarise(
total_corr_branch_length = sum(corr_branch_lengths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(total_corr_branch_length))
MRCA_length_BM <- x %>%
filter(branch_id %in% c("o", "p")) %>%
summarise(MRCA = sum(corr_branch_lengths, na.rm = TRUE)) %>%
pull(MRCA)
per_sample_totals_BM$MRCA <- MRCA_length_BM
# Remove MRCA mutation load per sample
per_sample_totals_BM <- per_sample_totals_BM %>%
mutate(total_corr_branch_length_wo_MRCA = total_corr_branch_length - MRCA)
# Compute latency time
latency_time_P856_BM <- age_P856_rel - res_P856$upper_node_lims$mean
# Compute mutation rate *per malignant sample*
per_sample_totals_BM <- per_sample_totals_BM %>%
mutate(mutation_rate_post_expansion = total_corr_branch_length_wo_MRCA / latency_time_P856_BM)
# Get mean and SE
mean_mutation_rate_post_expansion_P856_BM <- mean(per_sample_totals_BM$mutation_rate_post_expansion, na.rm = TRUE)
se_mutation_rate_post_expansion_P856_BM <- sd(per_sample_totals_BM$mutation_rate_post_expansion, na.rm = TRUE) /
sqrt(sum(!is.na(per_sample_totals_BM$mutation_rate_post_expansion)))
latency_time_P856_BM
# Compute latency time
latency_time_P856_BM <- age_P856_rel - res_P856_v2$upper_node_lims$mean
# Compute mutation rate *per malignant sample*
per_sample_totals_BM <- per_sample_totals_BM %>%
mutate(mutation_rate_post_expansion = total_corr_branch_length_wo_MRCA / latency_time_P856_BM)
# Get mean and SE
mean_mutation_rate_post_expansion_P856_BM <- mean(per_sample_totals_BM$mutation_rate_post_expansion, na.rm = TRUE)
se_mutation_rate_post_expansion_P856_BM <- sd(per_sample_totals_BM$mutation_rate_post_expansion, na.rm = TRUE) /
sqrt(sum(!is.na(per_sample_totals_BM$mutation_rate_post_expansion)))
mean_mutation_rate_post_expansion_P856_BM
se_mutation_rate_post_expansion_P856_BM
# Mutation rate of pre-expansion cell
mutation_rate_pre_expansion_P856_BM <- MRCA_length_BM/res_P856_v2$upper_node_lims$mean
mutation_rate_pre_expansion_P856_BM
# Keep only the normal samples
x_long_norm <- x_long %>%
filter(samples %in% P856_normal_cells)
# Sum corr_branch_lengths across ALL rows where each sample appears
per_sample_totals_norm <- x_long_norm %>%
group_by(samples) %>%
summarise(
total_corr_branch_length = sum(corr_branch_lengths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(total_corr_branch_length))
# Calculate mutation rate per normal sample
per_sample_totals_norm <- per_sample_totals_norm %>%
mutate(mutation_rate = total_corr_branch_length / age_P856_diag)
# Get mean and SE
mean_mutation_rate_normal_P856 <- mean(per_sample_totals_norm$mutation_rate, na.rm = TRUE)
se_mutation_rate_normal_P856 <- sd(per_sample_totals_norm$mutation_rate, na.rm = TRUE) /
sqrt(sum(!is.na(per_sample_totals_norm$mutation_rate)))
mean_mutation_rate_normal_P856
se_mutation_rate_normal_P856
mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA)
mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA)
mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA) - mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA)
(mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA) - mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA))/0.7
latency_time_P856_BM
latency_time_P856_PL
mean_mutation_rate_normal_P856
se_mutation_rate_normal_P856
mean_mutation_rate_post_expansion_P856_PL
se_mutation_rate_post_expansion_P856_PL
mutation_rate_pre_expansion_P856_BM
mean_mutation_rate_post_expansion_P856_BM
se_mutation_rate_post_expansion_P856_BM
mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA)
mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA)
mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA) - mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA)
(mean(per_sample_totals_BM$total_corr_branch_length_wo_MRCA) - mean(per_sample_totals_PL$total_corr_branch_length_wo_MRCA))/0.7
df <- read_excel("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/latency_period copy.xlsx")
df <- df %>% mutate(log_mut_rate = log(Mut_rate_tumour_mean))
exp_lm <- lm(log_mut_rate ~ Latency_period, data = df)
r2_exp  <- summary(exp_lm)$r.squared
p_val   <- summary(exp_lm)$coefficients["Latency_period", "Pr(>|t|)"]
p_str   <- ifelse(p_val < 1e-3, "< 0.001", sprintf("%.3f", p_val))
x_min <- 2
x_max <- 10
newdata <- data.frame(Latency_period = seq(x_min, x_max, length.out = 200))
pred    <- predict(exp_lm, newdata, interval = "confidence")
curve_df <- newdata %>%
mutate(
fit = exp(pred[, "fit"]),
lwr = exp(pred[, "lwr"]),
upr = exp(pred[, "upr"])
)
y_min <- 0
y_max <- 250
ann_x <- x_max - 2
ann_y <- y_max * 0.80
p1 <- ggplot(df, aes(x = Latency_period, y = Mut_rate_tumour_mean)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
# 95% confidence ribbon of exponential model
geom_ribbon(
data = curve_df,
aes(x = Latency_period, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.20
) +
# Exponential regression curve
geom_line(
data = curve_df,
aes(x = Latency_period, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate(
"text",
x = ann_x, y = ann_y, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_exp), "\n",
"p = ", p_str)
) +
labs(
x = "Latency period (years)",
y = "Mean tumour mutation rate post-expansion (SBS/year)"
) +
scale_x_continuous(limits = c(x_min, x_max)) +
scale_y_continuous(limits = c(y_min, y_max), breaks = seq(y_min, y_max, 50)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p1)
df <- read_excel("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/latency_period.xlsx")
df <- df %>% mutate(log_mut_rate = log(Mut_rate_tumour_mean))
exp_lm <- lm(log_mut_rate ~ Latency_period, data = df)
r2_exp  <- summary(exp_lm)$r.squared
p_val   <- summary(exp_lm)$coefficients["Latency_period", "Pr(>|t|)"]
p_str   <- ifelse(p_val < 1e-3, "< 0.001", sprintf("%.3f", p_val))
x_min <- 2
x_max <- 10
newdata <- data.frame(Latency_period = seq(x_min, x_max, length.out = 200))
pred    <- predict(exp_lm, newdata, interval = "confidence")
curve_df <- newdata %>%
mutate(
fit = exp(pred[, "fit"]),
lwr = exp(pred[, "lwr"]),
upr = exp(pred[, "upr"])
)
y_min <- 0
y_max <- 250
ann_x <- x_max - 2
ann_y <- y_max * 0.80
p1 <- ggplot(df, aes(x = Latency_period, y = Mut_rate_tumour_mean)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
# 95% confidence ribbon of exponential model
geom_ribbon(
data = curve_df,
aes(x = Latency_period, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.20
) +
# Exponential regression curve
geom_line(
data = curve_df,
aes(x = Latency_period, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate(
"text",
x = ann_x, y = ann_y, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_exp), "\n",
"p = ", p_str)
) +
labs(
x = "Latency period (years)",
y = "Mean tumour mutation rate post-expansion (SBS/year)"
) +
scale_x_continuous(limits = c(x_min, x_max)) +
scale_y_continuous(limits = c(y_min, y_max), breaks = seq(y_min, y_max, 50)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p1)
# Fit exponential model: log(Latency)
df <- df %>% mutate(log_latency = log(Latency_period))
exp_lm_age <- lm(log_latency ~ Age, data = df)
# Stats for annotation
r2_age  <- summary(exp_lm_age)$r.squared
p_age   <- summary(exp_lm_age)$coefficients["Age", "Pr(>|t|)"]
p_age_str <- ifelse(p_age < 1e-3, "< 0.001", sprintf("%.3f", p_age))
# Prediction range
x_min_age <- min(df$Age, na.rm = TRUE)
x_max_age <- max(df$Age, na.rm = TRUE)
new_age <- data.frame(Age = seq(x_min_age, x_max_age, length.out = 200))
pred_age <- predict(exp_lm_age, new_age, interval = "confidence")
curve_df_age <- new_age %>%
mutate(
fit = exp(pred_age[, "fit"]),
lwr = exp(pred_age[, "lwr"]),
upr = exp(pred_age[, "upr"])
)
# Y-axis limits for latency
y_min_lat <- 0
y_max_lat <- max(df$Latency_period) * 1.2
# Annotation placement
ann_x_age <- x_max_age - 2
ann_y_age <- y_max_lat * 0.85
# Plot
p2 <- ggplot(df, aes(x = Age, y = Latency_period)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
geom_ribbon(
data = curve_df_age,
aes(x = Age, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.2
) +
geom_line(
data = curve_df_age,
aes(x = Age, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate("text",
x = ann_x_age, y = ann_y_age, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_age), "\n",
"p = ", p_age_str)
) +
labs(
x = "Age at sampling (years)",
y = "Latency period (years)"
) +
scale_x_continuous(limits = c(x_min_age, x_max_age)) +
scale_y_continuous(limits = c(y_min_lat, y_max_lat)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p2)
df <- read_excel("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/latency_period copy.xlsx")
# Fit exponential model: log(Latency)
df <- df %>% mutate(log_latency = log(Latency_period))
exp_lm_age <- lm(log_latency ~ Age, data = df)
# Stats for annotation
r2_age  <- summary(exp_lm_age)$r.squared
p_age   <- summary(exp_lm_age)$coefficients["Age", "Pr(>|t|)"]
p_age_str <- ifelse(p_age < 1e-3, "< 0.001", sprintf("%.3f", p_age))
# Prediction range
x_min_age <- min(df$Age, na.rm = TRUE)
x_max_age <- max(df$Age, na.rm = TRUE)
new_age <- data.frame(Age = seq(x_min_age, x_max_age, length.out = 200))
pred_age <- predict(exp_lm_age, new_age, interval = "confidence")
curve_df_age <- new_age %>%
mutate(
fit = exp(pred_age[, "fit"]),
lwr = exp(pred_age[, "lwr"]),
upr = exp(pred_age[, "upr"])
)
# Y-axis limits for latency
y_min_lat <- 0
y_max_lat <- max(df$Latency_period) * 1.2
# Annotation placement
ann_x_age <- x_max_age - 2
ann_y_age <- y_max_lat * 0.85
# Plot
p2 <- ggplot(df, aes(x = Age, y = Latency_period)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
geom_ribbon(
data = curve_df_age,
aes(x = Age, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.2
) +
geom_line(
data = curve_df_age,
aes(x = Age, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate("text",
x = ann_x_age, y = ann_y_age, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_age), "\n",
"p = ", p_age_str)
) +
labs(
x = "Age at sampling (years)",
y = "Latency period (years)"
) +
scale_x_continuous(limits = c(x_min_age, x_max_age)) +
scale_y_continuous(limits = c(y_min_lat, y_max_lat)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p2)
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: latency correlations
# Author: Alexander Steemers
################################################################################
# Load libraries
library(readxl)
library(dplyr)
library(ggplot2)
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load data
df <- read_excel("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/latency_period.xlsx")
# Exponential model (log-linear)
df <- df %>% mutate(log_mut_rate = log(Mut_rate_tumour_mean))
exp_lm <- lm(log_mut_rate ~ Latency_period, data = df)
# Stats for annotation
r2_exp  <- summary(exp_lm)$r.squared
p_val   <- summary(exp_lm)$coefficients["Latency_period", "Pr(>|t|)"]
p_str   <- ifelse(p_val < 1e-3, "< 0.001", sprintf("%.3f", p_val))
# Smooth predictions (for curve + 95% CI), over plotting range
x_min <- 2
x_max <- 10
newdata <- data.frame(Latency_period = seq(x_min, x_max, length.out = 200))
pred    <- predict(exp_lm, newdata, interval = "confidence")
curve_df <- newdata %>%
mutate(
fit = exp(pred[, "fit"]),
lwr = exp(pred[, "lwr"]),
upr = exp(pred[, "upr"])
)
# Axes
y_min <- 0
y_max <- 250
# Annotation placement (inside the panel)
ann_x <- x_max - 2
ann_y <- y_max * 0.80
# Plot
p1 <- ggplot(df, aes(x = Latency_period, y = Mut_rate_tumour_mean)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
# 95% confidence ribbon of exponential model
geom_ribbon(
data = curve_df,
aes(x = Latency_period, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.20
) +
# Exponential regression curve
geom_line(
data = curve_df,
aes(x = Latency_period, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate(
"text",
x = ann_x, y = ann_y, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_exp), "\n",
"p = ", p_str)
) +
labs(
x = "Latency period (years)",
y = "Mean tumour mutation rate post-expansion (SBS/year)"
) +
scale_x_continuous(limits = c(x_min, x_max)) +
scale_y_continuous(limits = c(y_min, y_max), breaks = seq(y_min, y_max, 50)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p1)
# Save as PDF
ggsave(
filename = "~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/Rtreefit/Figures/mut_rate_vs_latency.pdf",
plot = p1,
width = 8, height = 6
)
# Fit exponential model: log(Latency)
df <- df %>% mutate(log_latency = log(Latency_period))
exp_lm_age <- lm(log_latency ~ Age, data = df)
# Stats for annotation
r2_age  <- summary(exp_lm_age)$r.squared
p_age   <- summary(exp_lm_age)$coefficients["Age", "Pr(>|t|)"]
p_age_str <- ifelse(p_age < 1e-3, "< 0.001", sprintf("%.3f", p_age))
# Prediction range
x_min_age <- min(df$Age, na.rm = TRUE)
x_max_age <- max(df$Age, na.rm = TRUE)
new_age <- data.frame(Age = seq(x_min_age, x_max_age, length.out = 200))
pred_age <- predict(exp_lm_age, new_age, interval = "confidence")
curve_df_age <- new_age %>%
mutate(
fit = exp(pred_age[, "fit"]),
lwr = exp(pred_age[, "lwr"]),
upr = exp(pred_age[, "upr"])
)
# Y-axis limits for latency
y_min_lat <- 0
y_max_lat <- max(df$Latency_period) * 1.2
# Annotation placement
ann_x_age <- x_max_age - 2
ann_y_age <- y_max_lat * 0.85
# Plot
p2 <- ggplot(df, aes(x = Age, y = Latency_period)) +
geom_point(size = 3, color = "black", na.rm = TRUE) +
geom_ribbon(
data = curve_df_age,
aes(x = Age, ymin = lwr, ymax = upr),
inherit.aes = FALSE,
alpha = 0.2
) +
geom_line(
data = curve_df_age,
aes(x = Age, y = fit),
inherit.aes = FALSE,
color = "black",
linewidth = 1
) +
annotate("text",
x = ann_x_age, y = ann_y_age, hjust = 0, size = 5,
label = paste0("R² = ", sprintf("%.3f", r2_age), "\n",
"p = ", p_age_str)
) +
labs(
x = "Age at sampling (years)",
y = "Latency period (years)"
) +
scale_x_continuous(limits = c(x_min_age, x_max_age)) +
scale_y_continuous(limits = c(y_min_lat, y_max_lat)) +
theme_CHemALL() +
theme(
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
print(p2)
# Save PDF
ggsave(
filename = "~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/Rtreefit/Figures/latency_vs_age.pdf",
plot = p2,
width = 8, height = 6
)
# 5) Annotate your existing plot (hide non-sig if you like)
p_oe_by_age_biopsy +
stat_pvalue_manual(
stat_test,
label = "p.adj.signif",
hide.ns = FALSE,
tip.length = 0.01,
step.increase = 0.06,
inherit.aes = FALSE   # <- key fix
)
ggsave(
"~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad/Figures/OE_boxplot_WTpooled_Malignant_AgeByBiopsy.pdf",
p_oe_by_age_biopsy, width = 5, height = 4
)
