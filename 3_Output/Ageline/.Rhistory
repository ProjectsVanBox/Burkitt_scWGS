pva9        <- filtered_samples[grepl("^PVA9", filtered_samples)]
pjbu        <- filtered_samples[grepl("^PJBU", filtered_samples)]
pb11197_p3g6
pb08410_prn4
pb14458_p856
pia9
pva9
pjbu
filtered_samples <- unique(c(low_call_frac_df$Sample_name, below_curve_df$Sample_name, fail_df_pta$samplename))  # samples that didn't pass QC
length(input_df_sc$Sample_name) - length(filtered_samples) # number of cells left after filtering steps 1 and 2
((length(input_df_sc$Sample_name) - length(filtered_samples))/length(input_df_sc$Sample_name)) *100 # percentage of cells left
pb11197_p3g6 <- filtered_samples[grepl("^P3G6|^PB11197", filtered_samples)]
pb08410_prn4 <- filtered_samples[grepl("^PB08410|^PRN4", filtered_samples)]
pb14458_p856 <- filtered_samples[grepl("^PB14458|^P856", filtered_samples)]
pia9        <- filtered_samples[grepl("^PIA9", filtered_samples)]
pva9        <- filtered_samples[grepl("^PVA9", filtered_samples)]
pjbu        <- filtered_samples[grepl("^PJBU", filtered_samples)]
group_counts <- data.frame(
Group = c("PB11197 / P3G6", "PB08410 / PRN4", "PB14458 / P856", "PIA9", "PVA9", "PJBU"),
Count = c(length(pb11197_p3g6),
length(pb08410_prn4),
length(pb14458_p856),
length(pia9),
length(pva9),
length(pjbu))
)
print(group_counts) # how many cells were removed because of QC steps
sample_names <- as.character(input_df_sc$Sample_name)
pb11197_p3g6 <- sample_names[grepl("^P3G6|^PB11197", sample_names)]
pb08410_prn4 <- sample_names[grepl("^PB08410|^PRN4", sample_names)]
pb14458_p856 <- sample_names[grepl("^PB14458|^P856", sample_names)]
pia9         <- sample_names[grepl("^PIA9", sample_names)]
pva9         <- sample_names[grepl("^PVA9", sample_names)]
pjbu         <- sample_names[grepl("^PJBU", sample_names)]
group_counts <- data.frame(
Group = c("PB11197 / P3G6", "PB08410 / PRN4", "PB14458 / P856", "PIA9", "PVA9", "PJBU"),
Count = c(length(pb11197_p3g6),
length(pb08410_prn4),
length(pb14458_p856),
length(pia9),
length(pva9),
length(pjbu))
)
print(group_counts) # how many cells left for each patient
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to plot ageline of single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
# Modified:
################################################################################
# Load libraries
library(BSgenome)
library(VariantAnnotation)
library(RColorBrewer)
library(tibble)
library(grid)
library(readxl)
library(Biostrings)
library(GenomicRanges)
library(stringr)
library(nlme)
library(dplyr)
library(ggrepel)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
# Load colour palettes
mycols_paired <- brewer.pal(12,"Paired")
mycols_dark2 <- brewer.pal(8, "Dark2")
# Set directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/Ageline/")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
diagnostic_df <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Bulk_sample_overview.csv')
below_curve_df <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/below_curve_samples.csv')
bad_baf_df <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/bad_baf_samples.csv')
fail_vaf_df <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/PTA_samples_failVAFcheck.txt')
low_callable_loci <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/low_callable_loci.csv')
blacklist <- unique(c(below_curve_df$Sample_name, fail_vaf_df$samplename, low_callable_loci$Sample_name))
SBSs_autosomal_PASS <- readRDS(file = "../MutLoad/Data/autosomal_PASS_variants_VAF015.RDS")
input_df_sub <- input_df_sub[ !input_df_sub$Sample_name %in% blacklist, ]
SBSs_autosomal_PASS <- SBSs_autosomal_PASS[ !(names(SBSs_autosomal_PASS) %in% blacklist) ]
mut_load_df <- data.frame(
Sample_name        = names(SBSs_autosomal_PASS),
Number_of_mutations = lengths(SBSs_autosomal_PASS),
row.names           = NULL,
stringsAsFactors    = FALSE
)
merged_df <- input_df_sub %>% left_join(mut_load_df, by = "Sample_name")
hg38_autosomal_nonN_genome_size <- 2745186691
merged_df$Callable_Loci <- as.numeric(merged_df$Callable_Loci)
merged_df$Nmut_adj <- merged_df$Number_of_mutations/merged_df$Callable_Loci * hg38_autosomal_nonN_genome_size
merged_df <- merged_df %>% mutate(MYC_SBS9_status = paste0(Myc_translocation_IGV, "_", SBS9))
merged_df <- merged_df %>% mutate(
Sample = case_when(
MYC_SBS9_status == "Yes_Positive" ~ "Burkitt Lymphoma cell",
MYC_SBS9_status == "No_Positive"  ~ "Normal Memory B cell",
MYC_SBS9_status == "No_Negative"  ~ "Normal Naive B cell",
MYC_SBS9_status == "No_NA"  ~ "Unknown",
MYC_SBS9_status == "Yes_NA"  ~ "Burkitt Lymphoma cell")
)
eq_df <- merged_df %>%
group_by(Sample) %>%
summarise(m = coef(lm(Nmut_adj ~ Age_at_sampling_Y))[2],
c = coef(lm(Nmut_adj ~ Age_at_sampling_Y))[1],
.groups = "drop") %>%
mutate(label = paste0("y = ", round(m, 0), "x + ", round(c, 0)),
x_pos = 20,
y_pos = m * x_pos + c + 100)
ggplot(merged_df, aes(Age_at_sampling_Y, Nmut_adj, colour = Sample)) +
#geom_smooth(data = subset(merged_df, Sample == "Burkitt Lymphoma cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#3F78C1") +
#geom_smooth(data = subset(merged_df, Sample == "Normal Memory B cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#B96C22") +
#geom_smooth(data = subset(merged_df, Sample == "Normal Naive B cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#EC9F55") +
#geom_smooth(data = subset(merged_df, Sample == "Unknown"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#000000") +
geom_jitter(width = 0.4, height = 0.4, size = 3) +
#geom_text(data = eq_df,
#          aes(x = x_pos, y = y_pos, label = label, colour = Sample),
#          hjust = -0.05, vjust = 1, size = 5, show.legend = FALSE) +
scale_colour_manual(values = c("Burkitt Lymphoma cell" = "#3F78C1",
"Normal Memory B cell"  = "#B96C22",
"Normal Naive B cell"   = "#EC9F55",
"Unknown" = "#000000" )) +
scale_x_continuous(limits = c(0, 20), breaks = seq(0, 20, 4), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 3500), breaks = seq(0,3500,500), expand = c(0, 0)) +
labs(x = "Age at sampling (in years)", y = "SNVs per cell") +
coord_cartesian(clip = "off") +
geom_abline(intercept = 1139, slope = 17, linetype = "dashed", colour = "black") +
geom_abline(intercept = 215, slope = 15, linetype = "dotted", colour = "black") +
theme_CHemALL() +
theme(
legend.position      = c(1.05, 1),
legend.justification = c(0, 1),
legend.background    = element_rect(fill = "white", colour = NA),
legend.margin        = margin(2, 4, 2, 4),
plot.margin          = margin(t = 15, r = 160, b = 15, l = 15),
text            = element_text(size = 12, colour = "black"),
axis.text       = element_text(size = 12, colour = "black")
)
fail_df_pta
write_csv(fail_df_pta, '../QC/Data/PTA_samples_failVAFcheck.txt')
fail_vaf_df <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/PTA_samples_failVAFcheck.txt')
low_callable_loci <- read.csv('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/low_callable_loci.csv')
blacklist <- unique(c(below_curve_df$Sample_name, fail_vaf_df$samplename, low_callable_loci$Sample_name))
blacklist
blacklist
SBSs_autosomal_PASS <- readRDS(file = "../MutLoad/Data/autosomal_PASS_variants_VAF015.RDS")
input_df_sub <- input_df_sub[ !input_df_sub$Sample_name %in% blacklist, ]
SBSs_autosomal_PASS <- SBSs_autosomal_PASS[ !(names(SBSs_autosomal_PASS) %in% blacklist) ]
mut_load_df <- data.frame(
Sample_name        = names(SBSs_autosomal_PASS),
Number_of_mutations = lengths(SBSs_autosomal_PASS),
row.names           = NULL,
stringsAsFactors    = FALSE
)
merged_df <- input_df_sub %>% left_join(mut_load_df, by = "Sample_name")
hg38_autosomal_nonN_genome_size <- 2745186691
merged_df$Callable_Loci <- as.numeric(merged_df$Callable_Loci)
merged_df$Nmut_adj <- merged_df$Number_of_mutations/merged_df$Callable_Loci * hg38_autosomal_nonN_genome_size
merged_df <- merged_df %>% mutate(MYC_SBS9_status = paste0(Myc_translocation_IGV, "_", SBS9))
merged_df <- merged_df %>% mutate(
Sample = case_when(
MYC_SBS9_status == "Yes_Positive" ~ "Burkitt Lymphoma cell",
MYC_SBS9_status == "No_Positive"  ~ "Normal Memory B cell",
MYC_SBS9_status == "No_Negative"  ~ "Normal Naive B cell",
MYC_SBS9_status == "No_NA"  ~ "Unknown",
MYC_SBS9_status == "Yes_NA"  ~ "Burkitt Lymphoma cell")
)
eq_df <- merged_df %>%
group_by(Sample) %>%
summarise(m = coef(lm(Nmut_adj ~ Age_at_sampling_Y))[2],
c = coef(lm(Nmut_adj ~ Age_at_sampling_Y))[1],
.groups = "drop") %>%
mutate(label = paste0("y = ", round(m, 0), "x + ", round(c, 0)),
x_pos = 20,
y_pos = m * x_pos + c + 100)
ggplot(merged_df, aes(Age_at_sampling_Y, Nmut_adj, colour = Sample)) +
#geom_smooth(data = subset(merged_df, Sample == "Burkitt Lymphoma cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#3F78C1") +
#geom_smooth(data = subset(merged_df, Sample == "Normal Memory B cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#B96C22") +
#geom_smooth(data = subset(merged_df, Sample == "Normal Naive B cell"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#EC9F55") +
#geom_smooth(data = subset(merged_df, Sample == "Unknown"),
#            method = "lm", se = FALSE, linewidth = 0.7,
#            fullrange = TRUE, colour = "#000000") +
geom_jitter(width = 0.4, height = 0.4, size = 3) +
#geom_text(data = eq_df,
#          aes(x = x_pos, y = y_pos, label = label, colour = Sample),
#          hjust = -0.05, vjust = 1, size = 5, show.legend = FALSE) +
scale_colour_manual(values = c("Burkitt Lymphoma cell" = "#3F78C1",
"Normal Memory B cell"  = "#B96C22",
"Normal Naive B cell"   = "#EC9F55",
"Unknown" = "#000000" )) +
scale_x_continuous(limits = c(0, 20), breaks = seq(0, 20, 4), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 3500), breaks = seq(0,3500,500), expand = c(0, 0)) +
labs(x = "Age at sampling (in years)", y = "SNVs per cell") +
coord_cartesian(clip = "off") +
geom_abline(intercept = 1139, slope = 17, linetype = "dashed", colour = "black") +
geom_abline(intercept = 215, slope = 15, linetype = "dotted", colour = "black") +
theme_CHemALL() +
theme(
legend.position      = c(1.05, 1),
legend.justification = c(0, 1),
legend.background    = element_rect(fill = "white", colour = NA),
legend.margin        = margin(2, 4, 2, 4),
plot.margin          = margin(t = 15, r = 160, b = 15, l = 15),
text            = element_text(size = 12, colour = "black"),
axis.text       = element_text(size = 12, colour = "black")
)
vcf_bulk = VariantAnnotation::readVcf("~/hpc/pmc_vanboxtel/projects/Burkitt/1_Input/ASAP_FROM_CLOUD/PIA9/vcf_batches/batch_bulk/vcf/germline/somatic_filtering/SMuRF/PIA9_bulk.vep.SMuRF.filtered.sorted.vcf.gz")
vcf_bulk_snvs <- vcf_bulk[isSNV(vcf_bulk)]
autosomes <- as.character(1:22)
vcf_bulk_autosomal <- vcf_bulk_snvs[seqnames(rowRanges(vcf_bulk_snvs)) %in% autosomes]
# Extract VAF (assumes it's in the FORMAT field named "VAF")
vaf_matrix <- geno(vcf_bulk_autosomal)$VAF
# If single sample, convert matrix to numeric
vaf_values <- as.numeric(vaf_matrix[, 1])
# Filter by VAF ≥ 0.3
vcf_bulk_filtered <- vcf_bulk_autosomal[vaf_values > 0.30]
tree = readRDS("~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/TreeBuilding_Alex/PIA9/Filtered_samples/CPW_04/TreeObject0.4.RDS")
vcf = VariantAnnotation::readVcf("~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/TreeBuilding_Alex/PIA9/PIA9.vep.sub.SNV.autosomal.noBulksNoBlacklist.vcf")
# prepare tree
tree = prepare_tree(tree)
# Get variant keys and VAFs for the bulk
bulk_keys <- variant_key(vcf_bulk_filtered)
bulk_vaf_matrix <- geno(vcf_bulk_filtered)$VAF
bulk_vafs <- as.numeric(bulk_vaf_matrix[, 1])  # Assumes single-sample VCF
# Create a named vector of VAFs for lookup
names(bulk_vafs) <- bulk_keys
# Prepare result list
shared_stats <- lapply(names(branch_vcf), function(branch_name) {
branch <- branch_vcf[[branch_name]]
branch_keys <- variant_key(branch)
# Get intersection
shared <- intersect(branch_keys, names(bulk_vafs))
# Get VAFs of shared variants from bulk
shared_vafs <- bulk_vafs[shared]
# Return as a list or data frame row
list(
branch = branch_name,
n_shared = length(shared),
shared_vafs = shared_vafs
)
})
# Convert to data frame with summary info
shared_summary_df <- do.call(rbind, lapply(shared_stats, function(x) {
data.frame(branch = x$branch, n_shared = x$n_shared)
}))
# Optionally view full VAF distributions per branch
names(shared_stats) <- sapply(shared_stats, function(x) x$branch)
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
library(tidyverse)
library(vcfR)
library(readxl)
library(ggtree)
library(treeio)
library(stringi)
library(stringdist)
library(BSgenome.Hsapiens.NCBI.GRCh38)
library(ggnewscale)
ref_genome = 'BSgenome.Hsapiens.NCBI.GRCh38'
library(MutationalPatterns)
library(VariantAnnotation)
library(ggplot2)
library(dplyr)
source("~/surfdrive/Shared/pmc_vanboxtel/personal/asteemers/R_packages/plot_signature_contribution_new.R")
#theme_set(theme_tree()) --> does not work with 96 plot
theme_set(theme_classic())
library(cellPhyWrapperPlotting) #devtools::install_local("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/Scripts/cellPhyWrapperPlotting/",force = TRUE)
source("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/colors/Jurrians_colors.R")
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
branch_grl = convert_vcf_to_granges(branch_vcf_list = branch_vcf, ref_genome = ref_genome)
branch_mm = mut_matrix(branch_grl, ref_genome)
branch_mm_ctg <- branch_mm[grep("\\[C>T\\]G", rownames(branch_mm)), ]
ctg_totals <- colSums(branch_mm_ctg)
# prepare tree
tree = prepare_tree(tree)
# plot bare tree
plot_gg_tree_base(tree)
plot_gg_tree(tree, add_branch_length = TRUE, add_bootstrap = F, add_tip_label = F,add_title = "P3G6 | Ascites | 13.7Y")
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
branch_grl = convert_vcf_to_granges(branch_vcf_list = branch_vcf, ref_genome = ref_genome)
branch_mm = mut_matrix(branch_grl, ref_genome)
branch_mm_ctg <- branch_mm[grep("\\[C>T\\]G", rownames(branch_mm)), ]
ctg_totals <- colSums(branch_mm_ctg)
###### Function to extract variant key
variant_key <- function(vcf) {
rr <- rowRanges(vcf)
paste0(
seqnames(rr), ":", start(rr), "_",
as.character(mcols(rr)$REF), ">",
as.character(unlist(mcols(rr)$ALT))
)
}
# Get variant keys and VAFs for the bulk
bulk_keys <- variant_key(vcf_bulk_filtered)
bulk_vaf_matrix <- geno(vcf_bulk_filtered)$VAF
bulk_vafs <- as.numeric(bulk_vaf_matrix[, 1])  # Assumes single-sample VCF
# Create a named vector of VAFs for lookup
names(bulk_vafs) <- bulk_keys
# Prepare result list
shared_stats <- lapply(names(branch_vcf), function(branch_name) {
branch <- branch_vcf[[branch_name]]
branch_keys <- variant_key(branch)
# Get intersection
shared <- intersect(branch_keys, names(bulk_vafs))
# Get VAFs of shared variants from bulk
shared_vafs <- bulk_vafs[shared]
# Return as a list or data frame row
list(
branch = branch_name,
n_shared = length(shared),
shared_vafs = shared_vafs
)
})
# Convert to data frame with summary info
shared_summary_df <- do.call(rbind, lapply(shared_stats, function(x) {
data.frame(branch = x$branch, n_shared = x$n_shared)
}))
# Optionally view full VAF distributions per branch
names(shared_stats) <- sapply(shared_stats, function(x) x$branch)
group1 <- c("Z")
group1 <- c("E3")
group2 <- c("J2","I2","H2", "N", "Y", "I3")
group3 <- c("J", "I", "H", "N", "M", "Q", "S", "W", "V", "U")
# Helper to combine VAFs from a list of branch names
get_vafs_for_group <- function(branch_names, stats_list) {
unlist(lapply(branch_names, function(branch) {
if (!is.null(stats_list[[branch]])) {
stats_list[[branch]]$shared_vafs
} else {
numeric(0)  # In case branch is missing
}
}))
}
vafs_group1 <- get_vafs_for_group(group1, shared_stats)
vafs_group2 <- get_vafs_for_group(group2, shared_stats)
vafs_group3 <- get_vafs_for_group(group3, shared_stats)
# Build one long data frame for ggplot
plot_df <- rbind(
data.frame(VAF = vafs_group1, Group = "Trunk"),
data.frame(VAF = vafs_group2, Group = "Intermediate"),
data.frame(VAF = vafs_group3, Group = "Private")
)
tree_mut_counts <- data.frame(
branch = tree@data$branch_id,
total_muts = tree@data$branch_length
)
get_shared_vs_total_stats <- function(branches, stats_list, tree_df) {
shared <- sum(sapply(branches, function(b) length(stats_list[[b]]$shared_vafs)))
total <- sum(tree_df$total_muts[match(branches, tree_df$branch)], na.rm = TRUE)
data.frame(
BranchGroup = paste(branches, collapse = "-"),  # renamed to avoid conflict
Shared = shared,
Total = total,
Label = paste0(shared, "/", total, " = ", round(100 * shared / total, 1), "%")
)
}
summary_stats <- rbind(
cbind(get_shared_vs_total_stats(group1, shared_stats, tree_mut_counts), Group = "Trunk"),
cbind(get_shared_vs_total_stats(group2, shared_stats, tree_mut_counts), Group = "Intermediate"),
cbind(get_shared_vs_total_stats(group3, shared_stats, tree_mut_counts), Group = "Private")
)
plot_df$Group <- factor(plot_df$Group, levels = c("Trunk", "Intermediate", "Private"))
summary_stats$Group <- factor(summary_stats$Group, levels = c("Trunk", "Intermediate", "Private"))
ggplot(plot_df, aes(x = VAF)) +
geom_histogram(bins = 20, fill = "steelblue", color = "white") +
facet_wrap(~Group, scales = "free_y") +
coord_cartesian(xlim = c(0, 1)) +
geom_text(
data = summary_stats,
aes(x = 0.8, y = Inf, label = Label),
inherit.aes = FALSE,
vjust = 2, size = 4.5, fontface = "bold"
) +
theme_classic() +
labs(
title = "Bulk VAF Distributions of Shared Mutations",
x = "Bulk VAF",
y = "Count"
)
tree = readRDS("~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/TreeBuilding_Alex/PIA9/Filtered_samples/CPW_03/TreeObject0.3.RDS")
# prepare tree
tree = prepare_tree(tree)
# plot bare tree
plot_gg_tree_base(tree)
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
branch_grl = convert_vcf_to_granges(branch_vcf_list = branch_vcf, ref_genome = ref_genome)
branch_mm = mut_matrix(branch_grl, ref_genome)
branch_mm_ctg <- branch_mm[grep("\\[C>T\\]G", rownames(branch_mm)), ]
ctg_totals <- colSums(branch_mm_ctg)
###### Function to extract variant key
variant_key <- function(vcf) {
rr <- rowRanges(vcf)
paste0(
seqnames(rr), ":", start(rr), "_",
as.character(mcols(rr)$REF), ">",
as.character(unlist(mcols(rr)$ALT))
)
}
# Get variant keys and VAFs for the bulk
bulk_keys <- variant_key(vcf_bulk_filtered)
bulk_vaf_matrix <- geno(vcf_bulk_filtered)$VAF
bulk_vafs <- as.numeric(bulk_vaf_matrix[, 1])  # Assumes single-sample VCF
# Create a named vector of VAFs for lookup
names(bulk_vafs) <- bulk_keys
# Prepare result list
shared_stats <- lapply(names(branch_vcf), function(branch_name) {
branch <- branch_vcf[[branch_name]]
branch_keys <- variant_key(branch)
# Get intersection
shared <- intersect(branch_keys, names(bulk_vafs))
# Get VAFs of shared variants from bulk
shared_vafs <- bulk_vafs[shared]
# Return as a list or data frame row
list(
branch = branch_name,
n_shared = length(shared),
shared_vafs = shared_vafs
)
})
# Convert to data frame with summary info
shared_summary_df <- do.call(rbind, lapply(shared_stats, function(x) {
data.frame(branch = x$branch, n_shared = x$n_shared)
}))
# Optionally view full VAF distributions per branch
names(shared_stats) <- sapply(shared_stats, function(x) x$branch)
group1 <- c("E3")
group2 <- c("J2","I2","H2", "N", "Y", "I3")
group3 <- c("J", "I", "H", "N", "M", "Q", "S", "W", "V", "U")
# Helper to combine VAFs from a list of branch names
get_vafs_for_group <- function(branch_names, stats_list) {
unlist(lapply(branch_names, function(branch) {
if (!is.null(stats_list[[branch]])) {
stats_list[[branch]]$shared_vafs
} else {
numeric(0)  # In case branch is missing
}
}))
}
vafs_group1 <- get_vafs_for_group(group1, shared_stats)
vafs_group2 <- get_vafs_for_group(group2, shared_stats)
vafs_group3 <- get_vafs_for_group(group3, shared_stats)
# Build one long data frame for ggplot
plot_df <- rbind(
data.frame(VAF = vafs_group1, Group = "Trunk"),
data.frame(VAF = vafs_group2, Group = "Intermediate"),
data.frame(VAF = vafs_group3, Group = "Private")
)
tree_mut_counts <- data.frame(
branch = tree@data$branch_id,
total_muts = tree@data$branch_length
)
get_shared_vs_total_stats <- function(branches, stats_list, tree_df) {
shared <- sum(sapply(branches, function(b) length(stats_list[[b]]$shared_vafs)))
total <- sum(tree_df$total_muts[match(branches, tree_df$branch)], na.rm = TRUE)
data.frame(
BranchGroup = paste(branches, collapse = "-"),  # renamed to avoid conflict
Shared = shared,
Total = total,
Label = paste0(shared, "/", total, " = ", round(100 * shared / total, 1), "%")
)
}
summary_stats <- rbind(
cbind(get_shared_vs_total_stats(group1, shared_stats, tree_mut_counts), Group = "Trunk"),
cbind(get_shared_vs_total_stats(group2, shared_stats, tree_mut_counts), Group = "Intermediate"),
cbind(get_shared_vs_total_stats(group3, shared_stats, tree_mut_counts), Group = "Private")
)
plot_df$Group <- factor(plot_df$Group, levels = c("Trunk", "Intermediate", "Private"))
summary_stats$Group <- factor(summary_stats$Group, levels = c("Trunk", "Intermediate", "Private"))
ggplot(plot_df, aes(x = VAF)) +
geom_histogram(bins = 20, fill = "steelblue", color = "white") +
facet_wrap(~Group, scales = "free_y") +
coord_cartesian(xlim = c(0, 1)) +
geom_text(
data = summary_stats,
aes(x = 0.8, y = Inf, label = Label),
inherit.aes = FALSE,
vjust = 2, size = 4.5, fontface = "bold"
) +
theme_classic() +
labs(
title = "Bulk VAF Distributions of Shared Mutations",
x = "Bulk VAF",
y = "Count"
)
View(branch_grl)
filtered_samples
length(input_df_sc$Sample_name) - length(filtered_samples) # number of cells left after filtering steps 1 and 2
((length(input_df_sc$Sample_name) - length(filtered_samples))/length(input_df_sc$Sample_name)) *100 # percentage of cells left
