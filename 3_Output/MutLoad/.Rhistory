low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
below_curve$Sample_name
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to look at callable loci, coverage and BAF quality of single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(ggplot2)
library(tidyverse)
library(readxl)
library(patchwork)
# Set filepath
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/")
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load plotting functions and color palette
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO_Ageline_checks/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
qc_colors <- c('grey', '#54BFB7', '#0A9086')
# Load metadata of samples
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sub <- input_df[,c('Sample_name','Mean_coverage','Callable_fraction','Lymphoma_type', "ResolveDNA_version", "CNV", "BAF")]
input_df_sc <- input_df_sub[input_df_sub$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
# Fit logaritmic model to Callable vs Mean_Coverage to identify outliers (i.e. likely lower quality)
model_df <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
model_df$Mean_coverage <- as.numeric(model_df$Mean_coverage)
model_df <- subset(model_df, Callable_fraction >= 0.5)
# Manual predicted values, define start values here
L_start <- max(model_df$Callable_fraction)
k_start <- 0.1
x0_start <- mean(model_df$Mean_coverage)
# Fit logistic model
nls_logistic <- nls(Callable_fraction ~ L / (1 + exp(-k * (Mean_coverage - x0))),
data = model_df,
start = list(L = L_start, k = k_start, x0 = x0_start))
# Add predictions
model_df$predicted_logistic <- predict(nls_logistic)
# Plot
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
geom_point(color = "#54BFB7") +
geom_line(aes(y = predicted_logistic), color = "#000000", size = 1) +
labs(title = "Logistic Fit to CallableFraction vs MeanCoverage")
# Calculate residuals to identify outliers
model_df$residual <- model_df$Callable_fraction - model_df$predicted_logistic
cutoff <- -0.04
below_curve <- subset(model_df, residual < cutoff)
model_df$MappingQuality <- 'Pass'
model_df[model_df$Sample_name %in% below_curve$Sample_name,]$MappingQuality <- 'Fail'
# Plot residuals in histogram and set cutoff for low quality samples
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.006) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggsave(paste0("Figures/residual_histogram_allsamples_", date, ".pdf"), width = 5, height = 3)
# Plot original relationship
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
theme_CHemALL() +
geom_line(aes(y = predicted_logistic), color = qc_colors[2], linewidth = 1) +
geom_point(aes(shape = Lymphoma_type, color = MappingQuality)) +
#geom_text(aes(label = Sample_ID), hjust = 0, vjust = 1.2, size = 2) +
scale_color_manual(values = qc_colors[c(1,3)]) +
scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6, 7))+
labs(title = "Identification of low quality samples")
ggsave(paste0("Figures/correlation_plot_allsamples_", date, ".pdf"), width = 5, height = 3)
# Print outlier samples
below_curve$Sample_name
# Plot category CNV and BAFplot vs residual
model_df_plot <- model_df[ !(is.na(model_df$BAF)),]
model_df_plot$CNV <- factor(model_df_plot$CNV, levels = c('to do','Bad','Intermediate','Good'))
model_df_plot$BAF <- factor(model_df_plot$BAF, levels = c('to do','Bad','Intermediate','Good'))
p1 <- ggplot(data = model_df_plot[model_df_plot$CNV != 'to do',], aes(x = CNV, y = residual, fill = CNV)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p2 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = residual, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p1 + p2
ggsave(paste0("Figures/residual_density_perCNV_BAF_group_", date, ".pdf"), width = 7, height = 3)
# Intersect between bad BAF and low callable samples
bad_baf_df <- subset(input_df, BAF == "Bad")
intersect(bad_baf_df$Sample_name, below_curve$Sample_name)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
# Percentage removed because of low quality (poor BAF plot + poor callable loci/mean coverage)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
# Export samples that did not pass initial QC
write.csv(below_curve, file = "Data/below_curve_samples.csv", row.names = F)
write.csv(bad_baf_df, file = "Data/bad_baf_samples.csv", row.names = F)
model_df_plot
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = Callable_fraction, y = residual, fill = Callable_fraction)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p3
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = Callable_fraction, y = residual, fill = Callable_fraction)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Callable_fraction, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4
View(model_df_plot)
unique(model_df_plot$BAF)
model_df_plot[is.na(model_df_plot$BAF), ]
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to look at callable loci, coverage and BAF quality of single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(ggplot2)
library(tidyverse)
library(readxl)
library(patchwork)
# Set filepath
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/")
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load plotting functions and color palette
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO_Ageline_checks/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
qc_colors <- c('grey', '#54BFB7', '#0A9086')
# Load metadata of samples
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sub <- input_df[,c('Sample_name','Mean_coverage','Callable_fraction','Lymphoma_type', "ResolveDNA_version", "CNV", "BAF")]
input_df_sc <- input_df_sub[input_df_sub$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
# Fit logaritmic model to Callable vs Mean_Coverage to identify outliers (i.e. likely lower quality)
model_df <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
model_df$Mean_coverage <- as.numeric(model_df$Mean_coverage)
model_df <- subset(model_df, Callable_fraction >= 0.5)
# Manual predicted values, define start values here
L_start <- max(model_df$Callable_fraction)
k_start <- 0.1
x0_start <- mean(model_df$Mean_coverage)
# Fit logistic model
nls_logistic <- nls(Callable_fraction ~ L / (1 + exp(-k * (Mean_coverage - x0))),
data = model_df,
start = list(L = L_start, k = k_start, x0 = x0_start))
# Add predictions
model_df$predicted_logistic <- predict(nls_logistic)
# Plot
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
geom_point(color = "#54BFB7") +
geom_line(aes(y = predicted_logistic), color = "#000000", size = 1) +
labs(title = "Logistic Fit to CallableFraction vs MeanCoverage")
# Calculate residuals to identify outliers
model_df$residual <- model_df$Callable_fraction - model_df$predicted_logistic
cutoff <- -0.04
below_curve <- subset(model_df, residual < cutoff)
model_df$MappingQuality <- 'Pass'
model_df[model_df$Sample_name %in% below_curve$Sample_name,]$MappingQuality <- 'Fail'
# Plot residuals in histogram and set cutoff for low quality samples
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.006) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggsave(paste0("Figures/residual_histogram_allsamples_", date, ".pdf"), width = 5, height = 3)
# Plot original relationship
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
theme_CHemALL() +
geom_line(aes(y = predicted_logistic), color = qc_colors[2], linewidth = 1) +
geom_point(aes(shape = Lymphoma_type, color = MappingQuality)) +
#geom_text(aes(label = Sample_ID), hjust = 0, vjust = 1.2, size = 2) +
scale_color_manual(values = qc_colors[c(1,3)]) +
scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6, 7))+
labs(title = "Identification of low quality samples")
ggsave(paste0("Figures/correlation_plot_allsamples_", date, ".pdf"), width = 5, height = 3)
# Print outlier samples
below_curve$Sample_name
# Plot category CNV and BAFplot vs residual
model_df_plot <- model_df[ !(is.na(model_df$BAF)),]
model_df_plot$CNV <- factor(model_df_plot$CNV, levels = c('to do','Bad','Intermediate','Good'))
model_df_plot$BAF <- factor(model_df_plot$BAF, levels = c('to do','Bad','Intermediate','Good'))
p1 <- ggplot(data = model_df_plot[model_df_plot$CNV != 'to do',], aes(x = CNV, y = residual, fill = CNV)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p2 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = residual, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p1 + p2
ggsave(paste0("Figures/residual_density_perCNV_BAF_group_", date, ".pdf"), width = 7, height = 3)
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Callable_fraction, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3 +p4
bad_baf_df <- subset(input_df, BAF == "Bad")
intersect(bad_baf_df$Sample_name, below_curve$Sample_name)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
bad_cvn_df <- subset(input_df, CNV == "Bad")
intersect(bad_cvn_df$Sample_name, below_curve$Sample_name)
setdiff(bad_cvn_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_cvn_df$Sample_name, below_curve$Sample_name)
low_q_samples
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
cutoff <- -0.05
below_curve <- subset(model_df, residual < cutoff)
model_df$MappingQuality <- 'Pass'
model_df[model_df$Sample_name %in% below_curve$Sample_name,]$MappingQuality <- 'Fail'
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.006) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.05) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.1) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
theme_CHemALL() +
geom_line(aes(y = predicted_logistic), color = qc_colors[2], linewidth = 1) +
geom_point(aes(shape = Lymphoma_type, color = MappingQuality)) +
#geom_text(aes(label = Sample_ID), hjust = 0, vjust = 1.2, size = 2) +
scale_color_manual(values = qc_colors[c(1,3)]) +
scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6, 7))+
labs(title = "Identification of low quality samples")
below_curve$Sample_name
model_df_plot <- model_df[ !(is.na(model_df$BAF)),]
model_df_plot$CNV <- factor(model_df_plot$CNV, levels = c('to do','Bad','Intermediate','Good'))
model_df_plot$BAF <- factor(model_df_plot$BAF, levels = c('to do','Bad','Intermediate','Good'))
p1 <- ggplot(data = model_df_plot[model_df_plot$CNV != 'to do',], aes(x = CNV, y = residual, fill = CNV)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p2 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = residual, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p1 + p2
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Callable_fraction, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3 + p4
bad_baf_df <- subset(input_df, BAF == "Bad")
bad_cvn_df <- subset(input_df, CNV == "Bad")
intersect(bad_baf_df$Sample_name, below_curve$Sample_name)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
intersect(bad_cvn_df$Sample_name, below_curve$Sample_name)
setdiff(bad_cvn_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_cvn_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to look at callable loci, coverage and BAF quality of single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(ggplot2)
library(tidyverse)
library(readxl)
library(patchwork)
# Set filepath
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/")
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load plotting functions and color palette
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO_Ageline_checks/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
qc_colors <- c('grey', '#54BFB7', '#0A9086')
# Load metadata of samples
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sub <- input_df[,c('Sample_name','Mean_coverage','Callable_fraction','Lymphoma_type', "ResolveDNA_version", "CNV", "BAF")]
input_df_sc <- input_df_sub[input_df_sub$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
# Fit logaritmic model to Callable vs Mean_Coverage to identify outliers (i.e. likely lower quality)
model_df <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
model_df$Mean_coverage <- as.numeric(model_df$Mean_coverage)
model_df <- subset(model_df, Callable_fraction >= 0.5)
# Manual predicted values, define start values here
L_start <- max(model_df$Callable_fraction)
k_start <- 0.1
x0_start <- mean(model_df$Mean_coverage)
# Fit logistic model
nls_logistic <- nls(Callable_fraction ~ L / (1 + exp(-k * (Mean_coverage - x0))),
data = model_df,
start = list(L = L_start, k = k_start, x0 = x0_start))
# Add predictions
model_df$predicted_logistic <- predict(nls_logistic)
# Plot
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
geom_point(color = "#54BFB7") +
geom_line(aes(y = predicted_logistic), color = "#000000", size = 1) +
labs(title = "Logistic Fit to CallableFraction vs MeanCoverage")
# Calculate residuals to identify outliers
model_df$residual <- model_df$Callable_fraction - model_df$predicted_logistic
cutoff <- -0.05
below_curve <- subset(model_df, residual < cutoff)
model_df$MappingQuality <- 'Pass'
model_df[model_df$Sample_name %in% below_curve$Sample_name,]$MappingQuality <- 'Fail'
# Plot residuals in histogram and set cutoff for low quality samples
ggplot() +
geom_histogram(data = model_df, aes(x = residual, fill = MappingQuality),
binwidth = 0.1) +
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggsave(paste0("Figures/residual_histogram_allsamples_", date, ".pdf"), width = 5, height = 3)
# Plot original relationship
ggplot(model_df, aes(x = Mean_coverage, y = Callable_fraction)) +
theme_CHemALL() +
geom_line(aes(y = predicted_logistic), color = qc_colors[2], linewidth = 1) +
geom_point(aes(shape = Lymphoma_type, color = MappingQuality)) +
#geom_text(aes(label = Sample_ID), hjust = 0, vjust = 1.2, size = 2) +
scale_color_manual(values = qc_colors[c(1,3)]) +
scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6, 7))+
labs(title = "Identification of low quality samples")
ggsave(paste0("Figures/correlation_plot_allsamples_", date, ".pdf"), width = 5, height = 3)
# Print outlier samples
below_curve$Sample_name
# Plot category CNV and BAFplot vs residual
model_df_plot <- model_df[ !(is.na(model_df$BAF)),]
model_df_plot$CNV <- factor(model_df_plot$CNV, levels = c('to do','Bad','Intermediate','Good'))
model_df_plot$BAF <- factor(model_df_plot$BAF, levels = c('to do','Bad','Intermediate','Good'))
p1 <- ggplot(data = model_df_plot[model_df_plot$CNV != 'to do',], aes(x = CNV, y = residual, fill = CNV)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p2 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = residual, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p1 + p2
ggsave(paste0("Figures/residual_density_perCNV_BAF_group_", date, ".pdf"), width = 7, height = 3)
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Callable_fraction, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3 + p4
# Intersect between bad BAF and low callable samples
bad_baf_df <- subset(input_df, BAF == "Bad")
intersect(bad_baf_df$Sample_name, below_curve$Sample_name)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df, Sample_name %in% low_q_samples)
# Percentage removed because of low quality (poor BAF plot + poor callable loci/mean coverage)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
# Export samples that did not pass initial QC
write.csv(below_curve, file = "Data/below_curve_samples.csv", row.names = F)
write.csv(bad_baf_df, file = "Data/bad_baf_samples.csv", row.names = F)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
library(tibble)
library(dplyr)
library(tidyr)
library(ggplot2)
library(reshape2)
library(VariantAnnotation)
library(readxl)
library(ggpubr)
library(readr)
vcf_file <- "/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/HaplotypeCaller/vcf/P3G6.vqsr.vcf.gz"
vcf <- readVcf(vcf_file, "hg38")  # or "hg19" depending on your genome build
vcf_file <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/HaplotypeCaller/vcf/P3G6.vqsr.vcf.gz"
vcf <- readVcf(vcf_file, "hg38")  # or "hg19" depending on your genome build
View(vcf)
vcf@metadata[["header"]]@samples
vcf <- vcf[seqnames(rowRanges(vcf)) %in% paste0("chr", 1:22)]
vcf_file <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/HaplotypeCaller/vcf/P3G6.vqsr.vcf.gz"
vcf <- readVcf(vcf_file, "hg38")  # or "hg19" depending on your genome build
vcf <- vcf[seqnames(rowRanges(vcf)) %in% as.character(1:22)]
ad <- geno(vcf)$AD  # array: variants x samples x 2 (ref, alt)
get_vaf <- function(ad_mat) {
ref <- ad_mat[,1]
alt <- ad_mat[,2]
vaf <- alt / (ref + alt)
return(vaf)
}
# Apply to all samples
vaf_list <- apply(ad, 2, get_vaf)  # list of VAF vectors per sample
ad
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to get filtered SNVs (total + autosomal) from single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(reshape2)
library(ggplot2)
library(tidyverse)
library(VariantAnnotation)
library(readxl)
library(BSgenome)
library(GenomicRanges)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
ptato_dir <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO"
folders_to_check <- c("P3G6", "PRN4", "P856", "PIA9", "PVA9", "PJBU")
MinimalVAF <- 0.15
find_filtered_vcf <- function(sample_id, ptato_dir, subdirs) {
patterns <- c(
sprintf("%s.*\\.snvs\\.ptatoV2\\.filtered\\.vcf(\\.gz)?$", sample_id),  # preferred
sprintf("%s.*\\.snvs\\.ptato\\.filtered\\.vcf(\\.gz)?$",   sample_id)   # fallback
)
for (pat in patterns) {
for (d in subdirs) {
hit <- list.files(file.path(ptato_dir, d),
pattern     = pat,
recursive   = TRUE,
full.names  = TRUE,
ignore.case = TRUE)
if (length(hit)) return(hit[1])
}
}
NA_character_
}
SBSs_filtered  <- list()   # every variant, with FILTER label
for (Sample in input_df_sub$Sample_name) {
message("→ processing ", Sample)
vcf_path <- find_filtered_vcf(Sample, ptato_dir, folders_to_check)
if (is.na(vcf_path)) {
warning("No filtered PTATO VCF found for ", Sample)
next
}
print(vcf_path) # to check if the right VCF file was used
vcf <- readVcf(vcf_path)
# Read VAF
if (!"VAF" %in% names(geno(vcf)))
stop("`geno(vcf)$VAF` not present in ", basename(vcf_path))
vaf <- geno(vcf)$VAF
if (length(dim(vaf)) == 2L)
vaf <- vaf[, 1, drop = TRUE]
# Add FILTER logic
rr <- rowRanges(vcf)
mcols(rr)$Chromosome <- as.character(seqnames(rr))
mcols(rr)$VAF    <- vaf
mcols(rr)$FILTER <- ifelse(vaf > MinimalVAF, "PASS", "FAIL_VAF")
SBSs_filtered[[Sample]]  <- rr
}
View(SBSs_filtered)
range(SBSs_filtered$`PB08410-BLLN-BCELLP1B11`$VAF)
range(SBSs_filtered$`PB08410-BLLN-BCELLP2B10`$VAF)
range(SBSs_filtered$`PB08410-BLLN-BCELLP2D10`$VAF)
