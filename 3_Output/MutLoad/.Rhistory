input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
below_curve_df <-  read.csv("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/below_curve_samples.csv")
bad_baf_df <-  read.csv("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/bad_baf_samples.csv")
low_quality_samples <- unique(c(below_curve_df$Sample_name, bad_baf_df$Sample_name))
input_df_filter <- input_df_sub %>% mutate(LowQual = ifelse(Sample_name %in% low_quality_samples, "Yes", "No"))
vafCheckfail <- SBSs_FAIL[names(SBSs_PASS) %in% input_df_filter$Sample_name]
empty_df <- list()
for (Sample in names(vafCheckfail)){
vafCheckfail[[Sample]]$samplename <- Sample
print(head(data.frame(vafCheckfail[[Sample]])))
empty_df[[Sample]] <- data.frame(vafCheckfail[[Sample]])
}
plot_dffail <- bind_rows(empty_df, .id = "column_label")
plot_df2 <- merge(plot_dffail, input_df_filter[,c('Novogene_ID','Myc_translocation_IGV', 'Sample_name', 'ResolveDNA_version', 'LowQual')], by.x = 'samplename',by.y = 'Sample_name')
plot_df2filt <- plot_df2[plot_df2$LowQual != "Yes", ]
ggplot(data = plot_df2filt,
aes(y = VAF, x = Myc_translocation_IGV)) +
geom_abline(slope = 0, intercept = 0.4) +
geom_violin(draw_quantiles = c(0.5, 0.75, 0.95), alpha = 0.8) +
scale_fill_manual(values = c('grey', '#54BFB7', '#0A9086')) +
ggtitle('VAF distribution post-PTATO') +
theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
ggplot(data = plot_df2,
aes(y = VAF, x = LowQual)) +
geom_abline(slope = 0, intercept = 0.4) +
geom_violin(draw_quantiles = c(0.5, 0.75, 0.95), alpha = 0.8) +
scale_fill_manual(values = c('grey', '#54BFB7', '#0A9086')) +
ggtitle('VAF distribution post-PTATO') +
theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
median_quantile <- quantile(plot_df2filt$VAF)[[3]]
threequart_quantile <- quantile(plot_df2filt$VAF)[[4]]
vafCheck <- SBSs_PASS[names(SBSs_PASS) %in% input_df_filter$Sample_name]
# convert granges to list of dataframes
empty_df <- list()
for (Sample in names(vafCheck)){
vafCheck[[Sample]]$samplename <- Sample
print(head(data.frame(vafCheck[[Sample]])))
empty_df[[Sample]] <- data.frame(vafCheck[[Sample]])
}
plot_df <- bind_rows(empty_df, .id = "column_label")
plot_df3 <- merge(plot_df, input_df_filter[,c('Novogene_ID','Myc_translocation_IGV', 'Sample_name', 'ResolveDNA_version', 'LowQual')], by.x = 'samplename',by.y = 'Sample_name')
plot_df3filt <- plot_df3[plot_df3$LowQual != "Yes", ]
ggplot(data = plot_df3filt,
aes(y = VAF, x = ResolveDNA_version)) +
geom_abline(slope = 0, intercept = 0.4) +
geom_violin(draw_quantiles = c(0.5), alpha = 0.8) +
scale_fill_manual(values = c('grey', '#54BFB7', '#0A9086')) +
ggtitle('VAF distribution post-PTATO') +
theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
ggplot(data = plot_df3filt,
aes(y = VAF, x = samplename, fill = FILTER)) +
geom_abline(slope = 0, intercept = 0.4) +
geom_hline(yintercept = 0.15, linetype = "dashed", colour = "red") +
geom_violin(draw_quantiles = c(0.5), alpha = 0.8) +
scale_fill_manual(values = c( '#0A9086','#54BFB7','grey')) +
ggtitle('VAF distribution post-PTATO') +
theme_CHemALL() +
ylim(0,1) +
ggTextAxisRotate() +
facet_wrap(~ Novogene_ID, scales = "free", ncol = 3) +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
merge_plot_df <- rbind(plot_df2filt, plot_df3filt)
ggplot(data = merge_plot_df,
aes(x = FILTER,
y = VAF, fill = FILTER)) +
#geom_abline(slope = 0, intercept = 0.4, color = '#54BFB7') +
#geom_abline(slope = 0, intercept = median_quantile, color = 'grey') +
#geom_abline(slope = 0, intercept = threequart_quantile, color = 'grey') +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
scale_fill_manual(values = c('grey', '#54BFB7', '#0A9086')) +
ggtitle('VAF distribution per sample post-PTATO') +
#facet_wrap(~ CellType + DONOR, scales = "free", ncol = 7) +
theme_CHemALL() +
ylim(0,1) +
ggTextAxisRotate() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
ggsave('Figures/PTA_samples_PASS-FAIL_postPTATOVAFdistr.pdf',
width = 75, height = 75, units = 'mm')
ggplot(data = merge_plot_df,
aes(x = samplename,
y = VAF, fill = FILTER)) +
#geom_abline(slope = 0, intercept = 0.4, color = '#54BFB7') +
#geom_abline(slope = 0, intercept = median_quantile, color = 'grey') +
#geom_abline(slope = 0, intercept = threequart_quantile, color = 'grey') +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
scale_fill_manual(values = c('grey', '#54BFB7', '#0A9086')) +
ggtitle('VAF distribution per sample post-PTATO') +
facet_wrap(~ samplename + Novogene_ID, scales = "free", ncol = 12) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
ggsave('Figures/PTA_samples_postPTATOVAFdistr.pdf',
width = 300, height = 300, units = 'mm')
num_bins <- 10
epsilon <- 1e-6  # to avoid zero-probability issues
input_df_vafs <- plot_df3filt # choose here
# 1. Bin VAFs into histogram for each sample
binned_df <- input_df_vafs %>%
mutate(bin = cut(VAF, breaks = seq(0, 1, length.out = num_bins + 1), include.lowest = TRUE)) %>%
group_by(samplename, bin) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(samplename) %>%
mutate(prob = (count + epsilon) / sum(count + epsilon)) %>%  # normalize
ungroup()
# 2. Pivot to wide format: one row per sample
wide_probs <- binned_df %>%
dplyr::select(samplename, bin, prob) %>%
pivot_wider(names_from = bin, values_from = prob, values_fill = list(prob = epsilon)) %>%
column_to_rownames("samplename")
# 3. Compute reference distribution (e.g., median across samples)
ref_dist <- apply(wide_probs, 2, median)
# 4. Compute TVD for each sample
tvd <- function(p, q) {
0.5 * sum(abs(p - q))
}
tvd_values <- apply(wide_probs, 1, function(p) tvd(p, ref_dist))
# 5. Output: samples ranked by TVD
tvd_df <- data.frame(samplename = names(tvd_values), TVD = tvd_values) %>%
arrange(desc(TVD))
# 6. Plot TVD scores
mad_val <- mad(tvd_df$TVD)
median_val <- median(tvd_df$TVD)
tvd_df <- tvd_df %>%
mutate(Flagged = TVD > (median_val + 2.5 * mad_val)) # https://www.sciencedirect.com/science/article/pii/S0022103113000668?via%3Dihub
ggplot(tvd_df, aes(x = TVD, y = reorder(samplename, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "samplename", y = "TVD") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black")) +
ggTextAxisRotate()
ggsave('Figures/PTA_samples_TVD_ranked_flagged_2_5mad.pdf', width = 10, height = 3)
#### annotate the other plot with this
plot_df3b <- merge(input_df_vafs, tvd_df)
# remove flagged with higher than median VAF
median(plot_df3b$VAF)
median_df <- plot_df3b %>% group_by(samplename) %>% summarise(med = median(VAF))
plot_df3b[plot_df3b$samplename %in% median_df[median_df$med > median(plot_df3b$VAF),]$samplename, 'Flagged'] <- FALSE
# rename that column
plot_df3b$VAFfilter <- 'Pass'
plot_df3b[plot_df3b$Flagged,]$VAFfilter <- 'Fail'
ggplot(data = plot_df3b,
aes(x = samplename,
y = VAF,
fill = VAFfilter)) +
#geom_abline(slope = 0, intercept = 0.4, color = '#54BFB7') +
#geom_abline(slope = 0, intercept = median_quantile, color = 'grey') +
#geom_abline(slope = 0, intercept = threequart_quantile, color = 'grey') +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle('VAF distribution per sample post-PTATO') +
facet_grid(~ Novogene_ID, scales = "free", space = 'free') +
scale_fill_manual(values = c('grey','#54BFB7')) + theme_CHemALL() +
ggTextAxisRotate() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
ggsave('Figures/PTA_postPTATOvafs_TVD_flagged_2_5mad.pdf', width = 12, height = 5)
#### export these
fail_df_pta <- unique(plot_df3b[plot_df3b$VAFfilter == 'Fail', c('samplename','Novogene_ID')])
write_csv(fail_df_pta, 'Data/PTA_samples_failVAFcheck.txt')
tvd_df <- tvd_df %>%
mutate(Flagged = TVD > (median_val + 3 * mad_val)) # https://www.sciencedirect.com/science/article/pii/S0022103113000668?via%3Dihub
ggplot(tvd_df, aes(x = TVD, y = reorder(samplename, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "samplename", y = "TVD") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black")) +
ggTextAxisRotate()
tvd_df <- tvd_df %>%
mutate(Flagged = TVD > (median_val + 2 * mad_val)) # https://www.sciencedirect.com/science/article/pii/S0022103113000668?via%3Dihub
ggplot(tvd_df, aes(x = TVD, y = reorder(samplename, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "samplename", y = "TVD") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(size = 5, colour = "black")) +
ggTextAxisRotate()
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to get filtered SNVs from single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries and set output path
library(reshape2)
library(ggplot2)
library(tidyverse)
library(VariantAnnotation)
library(readxl)
library(BSgenome)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
# Open PTATO output
ptato_dir <- '~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/'
# decide here which PTATO runs to use
folders_to_check <- c('P3G6',
'PRN4',
'P856')
# SNVs
SBSs_raw <- list()
MinimalVAF <- 0.15 # all true variants will have a VAF higher than MinimalVAF
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file)
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
# get all paths in folders
matching_files <- c()
for (subdir in folders_to_check) {
# Construct the full path to the subdirectory
full_path <- file.path(ptato_dir, subdir)
new_file1 <- list.files(full_path, pattern = paste("*snvs.ptato.vcf.gz$", sep = ""), recursive = TRUE, full.names = TRUE)
new_file <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
unfiltered_vcf <- matching_files[[1]]
matching_files <- c()
for (subdir in folders_to_check) {
full_path  <- file.path(ptato_dir, subdir)
# get every filtered PTATO VCF for this sample (with or without version tag)
new_file1 <- list.files(
full_path,
pattern = "\\.snvs\\.ptato(_?[vV][0-9]+)?\\.filtered\\.vcf(\\.gz)?$",
recursive = TRUE,
full.names = TRUE
)
new_file  <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
# keep v2 files if present
versioned <- grepl("_?[vV][0-9]+\\.filtered\\.vcf\\.gz$", matching_files)
if (any(versioned)) {
# If several versioned files exist, pick the highest version number
vers_num <- as.integer(
sub(".*_?[vV]([0-9]+)\\.filtered\\.vcf\\.gz$", "\\1",
matching_files[versioned],
ignore.case = TRUE)
)
filtered_vcf <- matching_files[versioned][ which.max(vers_num) ]
} else {
filtered_vcf <- matching_files[1]
}
SBSs_raw[[Sample]] <- readPTATOvcf(vcf_unfiltered = unfiltered_vcf,
vcf_filtered = filtered_vcf,
VAF_threshold = MinimalVAF)
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[ SBSs_raw[[Sample]]$VAF < MinimalVAF] <- "FAIL_VAF"
}
}
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file), for bulk samples we use the SMuRF-filtered VCFs
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[( SBSs_raw[[Sample]]$VAF < MinimalVAF) & (SBSs_raw[[Sample]]$PTAprob <= SBSs_raw[[Sample]]$PTAprobCutoff)] <- "FAIL_VAF"
}
}
saveRDS(SBSs_raw, file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_raw <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_PASS_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL"),])
SBSs_FAIL_VAF_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL_VAF"),])
View(SBSs_raw)
SBSs_raw
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file), for bulk samples we use the SMuRF-filtered VCFs
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[( SBSs_raw[[Sample]]$VAF < MinimalVAF) & (SBSs_raw[[Sample]]$PTAprob <= SBSs_raw[[Sample]]$PTAprobCutoff)] <- "FAIL_VAF"
}
}
saveRDS(SBSs_raw, file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_raw <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_PASS_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL"),])
SBSs_FAIL_VAF_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL_VAF"),])
SBSs_PASS_total <- lapply(SBSs_raw, function(x) x[x$FILTER == "PASS"])
SBSs_raw_autosomal <-  lapply(SBSs_raw, function(x) x[which(as.vector(seqnames(x)) %in% paste("chr", c(1:22), sep = "")),])
View(SBSs_raw)
View(SBSs_raw)
View(SBSs_raw)
# Load libraries and set output path
library(reshape2)
library(ggplot2)
library(tidyverse)
library(VariantAnnotation)
library(readxl)
library(BSgenome)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
ptato_dir <- '~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/'
# decide here which PTATO runs to use
folders_to_check <- c('P3G6',
'PRN4',
'P856')
SBSs_raw <- list()
MinimalVAF <- 0.15 # all true variants will have a VAF higher than MinimalVAF
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file)
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
# get all paths in folders
matching_files <- c()
for (subdir in folders_to_check) {
# Construct the full path to the subdirectory
full_path <- file.path(ptato_dir, subdir)
new_file1 <- list.files(full_path, pattern = paste("*snvs.ptato.vcf.gz$", sep = ""), recursive = TRUE, full.names = TRUE)
new_file <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
unfiltered_vcf <- matching_files[[1]]
matching_files <- c()
for (subdir in folders_to_check) {
full_path  <- file.path(ptato_dir, subdir)
# get every filtered PTATO VCF for this sample (with or without version tag)
new_file1 <- list.files(
full_path,
pattern = "\\.snvs\\.ptato(_?[vV][0-9]+)?\\.filtered\\.vcf(\\.gz)?$",
recursive = TRUE,
full.names = TRUE
)
new_file  <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
# keep v2 files if present
versioned <- grepl("_?[vV][0-9]+\\.filtered\\.vcf\\.gz$", matching_files)
if (any(versioned)) {
# If several versioned files exist, pick the highest version number
vers_num <- as.integer(
sub(".*_?[vV]([0-9]+)\\.filtered\\.vcf\\.gz$", "\\1",
matching_files[versioned],
ignore.case = TRUE)
)
filtered_vcf <- matching_files[versioned][ which.max(vers_num) ]
} else {
filtered_vcf <- matching_files[1]
}
SBSs_raw[[Sample]] <- readPTATOvcf(vcf_unfiltered = unfiltered_vcf,
vcf_filtered = filtered_vcf,
VAF_threshold = MinimalVAF)
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[ SBSs_raw[[Sample]]$VAF < MinimalVAF] <- "FAIL_VAF"
}
}
View(SBSs_raw)
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file), for bulk samples we use the SMuRF-filtered VCFs
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[( SBSs_raw[[Sample]]$VAF < MinimalVAF) & (SBSs_raw[[Sample]]$PTAprob <= SBSs_raw[[Sample]]$PTAprobCutoff)] <- "FAIL_VAF"
}
}
View(SBSs_raw)
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to get filtered SNVs (total + autosomal) from single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries and set output path
library(reshape2)
library(ggplot2)
library(tidyverse)
library(VariantAnnotation)
library(readxl)
library(BSgenome)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
# Open PTATO output
ptato_dir <- '~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/'
# decide here which PTATO runs to use
folders_to_check <- c('P3G6',
'PRN4',
'P856')
# SNVs
SBSs_raw <- list()
MinimalVAF <- 0.15 # all true variants will have a VAF higher than MinimalVAF
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file)
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
# get all paths in folders
matching_files <- c()
for (subdir in folders_to_check) {
# Construct the full path to the subdirectory
full_path <- file.path(ptato_dir, subdir)
new_file1 <- list.files(full_path, pattern = paste("*snvs.ptato.vcf.gz$", sep = ""), recursive = TRUE, full.names = TRUE)
new_file <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
unfiltered_vcf <- matching_files[[1]]
matching_files <- c()
for (subdir in folders_to_check) {
full_path  <- file.path(ptato_dir, subdir)
# get every filtered PTATO VCF for this sample (with or without version tag)
new_file1 <- list.files(
full_path,
pattern = "\\.snvs\\.ptato(_?[vV][0-9]+)?\\.filtered\\.vcf(\\.gz)?$",
recursive = TRUE,
full.names = TRUE
)
new_file  <- new_file1[grep(Sample, new_file1)]
matching_files <- c(matching_files, new_file)
}
# keep v2 files if present
versioned <- grepl("_?[vV][0-9]+\\.filtered\\.vcf(\\.gz)?$", matching_files)
if (any(versioned)) {
# If several versioned files exist, pick the highest version number
vers_num <- as.integer(
sub(".*_?[vV]([0-9]+)\\.filtered\\.vcf(\\.gz)?$", "\\1",
matching_files[versioned], ignore.case = TRUE)
)
filtered_vcf <- matching_files[versioned][ which.max(vers_num) ]
} else {
filtered_vcf <- matching_files[1]
}
SBSs_raw[[Sample]] <- readPTATOvcf(vcf_unfiltered = unfiltered_vcf,
vcf_filtered = filtered_vcf,
VAF_threshold = MinimalVAF)
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[ SBSs_raw[[Sample]]$VAF < MinimalVAF] <- "FAIL_VAF"
}
}
View(SBSs_raw)
for(Sample in input_df_sub$Sample_name){
print(Sample)
# For PTA samples we use the PTATO-unfiltered VCFs (PTA prob cutoff is retrieved from filtered file), for bulk samples we use the SMuRF-filtered VCFs
if(input_df_sub$ResolveDNA_version[input_df_sub$Sample_name == Sample] %in% c("v1", "v2", "v2.0")){
SBSs_raw[[Sample]]$FILTER <- ifelse(SBSs_raw[[Sample]]$PTAprob > SBSs_raw[[Sample]]$PTAprobCutoff, "FAIL", "PASS")
SBSs_raw[[Sample]]$FILTER[( SBSs_raw[[Sample]]$VAF < MinimalVAF) & (SBSs_raw[[Sample]]$PTAprob <= SBSs_raw[[Sample]]$PTAprobCutoff)] <- "FAIL_VAF"
}
}
saveRDS(SBSs_raw, file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_raw <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_PASS_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL"),])
SBSs_FAIL_VAF_total <- lapply(SBSs_raw, function(x) x[which(x$FILTER =="FAIL_VAF"),])
saveRDS(SBSs_PASS_total, file = "Data/total_PASS_variants_PTA_VAF015.RDS")
saveRDS(SBSs_FAIL_total, file = "Data/total_FAIL_variants_PTA_VAF015.RDS")
saveRDS(SBSs_FAIL_VAF_total, file = "Data/total_FAILVAF_variants_PTA_VAF015.RDS")
SBSs_raw_autosomal <-  lapply(SBSs_raw, function(x) x[which(as.vector(seqnames(x)) %in% paste("chr", c(1:22), sep = "")),])
saveRDS(SBSs_raw_autosomal, file = "Data/autosomal_variants_ResolveDNA_VAF015.RDS")
SBSs_raw_autosomal <- readRDS(file = "Data/autosomal_variants_ResolveDNA_VAF015.RDS")
SBSs_PASS <- lapply(SBSs_raw_autosomal, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL <- lapply(SBSs_raw_autosomal, function(x) x[which(x$FILTER =="FAIL"),])
SBSs_FAIL_VAF <- lapply(SBSs_raw_autosomal, function(x) x[which(x$FILTER =="FAIL_VAF"),])
saveRDS(SBSs_PASS, file = "Data/autosomal_PASS_variants_PTA_VAF015.RDS")
saveRDS(SBSs_FAIL, file = "Data/autosomal_FAIL_variants_PTA_VAF015.RDS")
saveRDS(SBSs_FAIL_VAF, file = "Data/autosomal_FAILVAF_variants_PTA_VAF015.RDS")
cutoffs <- lapply(SBSs_raw_autosomal, function(x) unique(x$PTAprobCutoff))
get_lengths <- function(lst) vapply(lst, length, integer(1))
counts <- tibble(
Sample    = names(SBSs_PASS),
PASS      = get_lengths(SBSs_PASS),
FAIL      = get_lengths(SBSs_FAIL),
FAIL_VAF  = get_lengths(SBSs_FAIL_VAF)
) |>
pivot_longer(-Sample, names_to = "Category", values_to = "Count")
ggplot(counts, aes(x = Sample, y = Count, fill = Category)) +
geom_col(position = "stack", width = 0.8) +
scale_fill_manual(values = c(PASS = "forestgreen", FAIL = "firebrick",FAIL_VAF = "goldenrod")) +
labs(x = "Sample", y = "Number of autosomal SNVs", fill = "Filter status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggsave(paste0("Figures/Mut_load_filtering_stacked_barplot_VAF015.pdf"))
