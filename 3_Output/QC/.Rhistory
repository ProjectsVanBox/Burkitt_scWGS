ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "Sample_name") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.y = element_text(angle = 90, hjust = 0.5))
# Annotate the other plot with this
plot_df <- merge(single_cell_df_filtered, tvd_df)
# Remove flagged with higher than median VAF
median(plot_df$VAF)
median_df <- plot_df %>% group_by(Sample) %>% summarise(med = median(VAF))
plot_df[plot_df$Sample %in% median_df[median_df$med > median(plot_df$VAF),]$Sample, 'Flagged'] <- FALSE
# Rename that column
plot_df$VAFfilter <- 'Pass'
plot_df[plot_df$Flagged,]$VAFfilter <- 'Fail'
unique_donors <- unique(plot_df$Donor)
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(size = 7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
print(p)
}
fail_samples <- plot_df %>%
filter(VAFfilter == "Fail") %>%
pull(Sample) %>%
unique() %>%
as.character()
fail_samples <- plot_df %>%
filter(VAFfilter == "Fail") %>%
pull(Sample) %>%
unique() %>%
as.character()
blacklist_samples <- unique(c(filtered_out, fail_samples, below_curve_df$Sample_name))
group_1 <- blacklist_samples[grepl("^P856|^PB14458", blacklist_samples)]
group_2 <- blacklist_samples[grepl("^P3G6|^PB11197", blacklist_samples)]
group_3 <- blacklist_samples[grepl("^PRN4|^PB08410", blacklist_samples)]
group_4 <- blacklist_samples[grepl("^PIA9", blacklist_samples)]
group_5 <- blacklist_samples[grepl("^PVA9", blacklist_samples)]
group_6 <- blacklist_samples[grepl("^PJBU", blacklist_samples)]
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
perc_removed <- (length(blacklist_samples))/length(input_df_sc$Sample_name)*100
print(perc_removed)
abs_num_kept <- length(input_df_sc$Sample_name) - length(blacklist_samples)
input_df_sub <- input_df_sc[!(input_df_sc$Sample_name %in% blacklist_samples), ]
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
blacklist_samples <- unique(c(low_call_frac_df, fail_samples, below_curve_df$Sample_name))
group_1 <- blacklist_samples[grepl("^P856|^PB14458", blacklist_samples)]
group_2 <- blacklist_samples[grepl("^P3G6|^PB11197", blacklist_samples)]
group_3 <- blacklist_samples[grepl("^PRN4|^PB08410", blacklist_samples)]
group_4 <- blacklist_samples[grepl("^PIA9", blacklist_samples)]
group_5 <- blacklist_samples[grepl("^PVA9", blacklist_samples)]
group_6 <- blacklist_samples[grepl("^PJBU", blacklist_samples)]
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
perc_removed <- (length(blacklist_samples))/length(input_df_sc$Sample_name)*100
print(perc_removed)
abs_num_kept <- length(input_df_sc$Sample_name) - length(blacklist_samples)
input_df_sub <- input_df_sc[!(input_df_sc$Sample_name %in% blacklist_samples), ]
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
low_call_frac_df
blacklist_samples <- unique(c(low_call_frac_samples, fail_samples, below_curve_df$Sample_name))
group_1 <- blacklist_samples[grepl("^P856|^PB14458", blacklist_samples)]
group_2 <- blacklist_samples[grepl("^P3G6|^PB11197", blacklist_samples)]
group_3 <- blacklist_samples[grepl("^PRN4|^PB08410", blacklist_samples)]
group_4 <- blacklist_samples[grepl("^PIA9", blacklist_samples)]
group_5 <- blacklist_samples[grepl("^PVA9", blacklist_samples)]
group_6 <- blacklist_samples[grepl("^PJBU", blacklist_samples)]
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
perc_removed <- (length(blacklist_samples))/length(input_df_sc$Sample_name)*100
print(perc_removed)
abs_num_kept <- length(input_df_sc$Sample_name) - length(blacklist_samples)
input_df_sub <- input_df_sc[!(input_df_sc$Sample_name %in% blacklist_samples), ]
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
group_1
group_2
group_4
group_3
group_5
group_6
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
input_df_sub
abs_num_kept
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to look at callable loci, coverage and BAF quality of single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(ggplot2)
library(tidyverse)
library(readxl)
library(patchwork)
# Set filepath
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/")
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load plotting functions and color palette
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO_Ageline_checks/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
qc_colors <- c('grey', '#54BFB7', '#0A9086')
# Load metadata of single cell samples
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sub <- input_df[,c('Sample_name','Mean_coverage','Callable_fraction','Lymphoma_type', "ResolveDNA_version", "CNV", "BAF")]
input_df_sc <- input_df_sub[input_df_sub$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
# Fit logaritmic model to Callable vs Mean_Coverage to identify outliers (i.e. likely lower quality)
model_df <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
model_df$Mean_coverage <- as.numeric(model_df$Mean_coverage)
model_df_sub <- subset(model_df, Callable_fraction >= 0.4)
# Samples which are initially filtered out due to low callable fraction
filtered_out <- model_df$Sample_name[model_df$Callable_fraction < 0.4] #21 samples
write.csv(filtered_out, file = "Data/low_callable_frac_samples.csv", row.names = F)
# Manual predicted values, define start values here
L_start <- max(model_df_sub$Callable_fraction)
k_start <- 0.1
x0_start <- mean(model_df_sub$Mean_coverage)
# Fit logistic model
nls_logistic <- nls(Callable_fraction ~ L / (1 + exp(-k * (Mean_coverage - x0))),
data = model_df_sub,
start = list(L = L_start, k = k_start, x0 = x0_start))
# Add predictions
model_df_sub$predicted_logistic <- predict(nls_logistic)
# Plot
ggplot(model_df_sub, aes(x = Mean_coverage, y = Callable_fraction)) +
geom_point(color = "#54BFB7") +
geom_line(aes(y = predicted_logistic), color = "#000000", size = 1) +
labs(title = "Logistic Fit to CallableFraction vs MeanCoverage")
# Calculate residuals to identify outliers
model_df_sub$residual <- model_df_sub$Callable_fraction - model_df_sub$predicted_logistic
cutoff <- -0.05
below_curve <- subset(model_df_sub, residual < cutoff)
model_df_sub$MappingQuality <- 'Pass'
model_df_sub[model_df_sub$Sample_name %in% below_curve$Sample_name,]$MappingQuality <- 'Fail'
# Plot residuals in histogram and set cutoff for low quality samples
ggplot() +
geom_histogram(data = model_df_sub, aes(x = residual, fill = MappingQuality),
binwidth = 0.1)+
geom_vline(xintercept = cutoff) +
theme_CHemALL() +
scale_fill_manual(values = qc_colors[c(1,3)]) +
ggtitle('Residual from predicted callable genome fraction')
ggsave(paste0("Figures/residual_histogram_allsamples_", date, ".pdf"), width = 5, height = 3)
# Plot original relationship
ggplot(model_df_sub, aes(x = Mean_coverage, y = Callable_fraction)) +
theme_CHemALL() +
geom_line(aes(y = predicted_logistic), color = qc_colors[2], linewidth = 1) +
geom_point(aes(shape = Lymphoma_type, color = MappingQuality)) +
#geom_text(aes(label = Sample_ID), hjust = 0, vjust = 1.2, size = 2) +
scale_color_manual(values = qc_colors[c(1,3)]) +
scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6, 7))+
labs(title = "Identification of low quality samples")
ggsave(paste0("Figures/correlation_plot_allsamples_", date, ".pdf"), width = 5, height = 3)
# Print outlier samples
below_curve$Sample_name
# Plot category CNV and BAFplot vs residual
model_df_plot <- model_df_sub[ !(is.na(model_df_sub$BAF)),]
model_df_plot$CNV <- factor(model_df_plot$CNV, levels = c('to do','Bad','Intermediate','Good'))
model_df_plot$BAF <- factor(model_df_plot$BAF, levels = c('to do','Bad','Intermediate','Good'))
p1 <- ggplot(data = model_df_plot[model_df_plot$CNV != 'to do',], aes(x = CNV, y = residual, fill = CNV)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p2 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = residual, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7) +
geom_hline(yintercept = cutoff, linetype = "solid", color = "black") +
ggtitle('Residual from predicted callable genome fraction')
p1 + p2
ggsave(paste0("Figures/residual_density_perCNV_BAF_group_", date, ".pdf"), width = 7, height = 3)
p3 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Callable_fraction, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p4 <- ggplot(data = model_df_plot[model_df_plot$BAF != 'to do',], aes(x = BAF, y = Mean_coverage, fill = BAF)) +
geom_violin() + scale_fill_manual(values = qc_colors) + theme_CHemALL() +
geom_jitter(width = 0.2, size = 1, alpha = 0.7)
p3 + p4
# Intersect between bad BAF and low callable samples
bad_baf_df <- subset(input_df, BAF == "Bad")
intersect(bad_baf_df$Sample_name, below_curve$Sample_name)
setdiff(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples <- union(bad_baf_df$Sample_name, below_curve$Sample_name)
low_q_samples_df <- subset(model_df_sub, Sample_name %in% low_q_samples)
# Percentage removed because of low quality (poor BAF plot + poor callable loci/mean coverage)
perc_removed <- (length(low_q_samples))/length(model_df$Sample_name)*100
print(perc_removed)
perc_kept <- 100-perc_removed
print(perc_kept)
abs_num_kept <- length(model_df$Sample_name) - length(low_q_samples)
# Export samples that did not pass initial QC
write.csv(below_curve, file = "Data/below_curve_samples.csv", row.names = F)
write.csv(bad_baf_df, file = "Data/bad_baf_samples.csv", row.names = F)
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to filter out samples with VAF outliers using median absolute deviation (MAD) scoring
# Author: Alexander Steemers
# Date: July 2025
################################################################################
# Load libraries
library(VariantAnnotation)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tibble)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Read RDS here
single_cell_df <- readRDS(file = "~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad/Data/PASS_autosomal_VAFcutoff_single_cell_samples.RDS")
# Remove below curve samples and determine VAF cutoff using MAD outlier detection
below_curve_df <-  read.csv("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/below_curve_samples.csv")
low_call_frac_df <-  read.csv("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/QC/Data/low_callable_frac_samples.csv")
low_call_frac_samples <- as.character(low_call_frac_df$x)
single_cell_df_filtered <- single_cell_df %>%
filter(!Sample %in% below_curve_df$Sample_name,
!Sample %in% low_call_frac_samples)
# Parameters
num_bins <- 10
epsilon <- 1e-6  # to avoid zero-probability issues
# Decide here if using filtered data (coverage quality) or unfiltered data (all samples)
# 1. Bin VAFs into histogram for each sample
binned_df <- single_cell_df_filtered %>%
mutate(bin = cut(VAF, breaks = seq(0, 1, length.out = num_bins + 1), include.lowest = TRUE)) %>%
group_by(Sample, bin) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(Sample) %>%
mutate(prob = (count + epsilon) / sum(count + epsilon)) %>%  # normalize
ungroup()
# 2. Pivot to wide format: one row per sample
wide_probs <- binned_df %>%
dplyr::select(Sample, bin, prob) %>%
pivot_wider(names_from = bin, values_from = prob, values_fill = list(prob = epsilon)) %>%
column_to_rownames("Sample")
# 3. Compute reference distribution (e.g., median across samples)
ref_dist <- apply(wide_probs, 2, median)
# 4. Compute TVD for each sample
tvd <- function(p, q) {
0.5 * sum(abs(p - q))
}
tvd_values <- apply(wide_probs, 1, function(p) tvd(p, ref_dist))
# 5. Output: samples ranked by TVD
tvd_df <- data.frame(Sample = names(tvd_values), TVD = tvd_values) %>%
arrange(desc(TVD))
# 6. Plot TVD scores
mad_val <- mad(tvd_df$TVD)
median_val <- median(tvd_df$TVD)
tvd_df <- tvd_df %>%
mutate(Flagged = TVD > (median_val + 2.5 * mad_val)) # https://www.sciencedirect.com/science/article/pii/S0022103113000668?via%3Dihub
ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "Sample_name") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.y = element_text(angle = 90, hjust = 0.5))
# Annotate the other plot with this
plot_df <- merge(single_cell_df_filtered, tvd_df)
# Remove flagged with higher than median VAF
median(plot_df$VAF)
median_df <- plot_df %>% group_by(Sample) %>% summarise(med = median(VAF))
plot_df[plot_df$Sample %in% median_df[median_df$med > median(plot_df$VAF),]$Sample, 'Flagged'] <- FALSE
# Rename that column
plot_df$VAFfilter <- 'Pass'
plot_df[plot_df$Flagged,]$VAFfilter <- 'Fail'
unique_donors <- unique(plot_df$Donor)
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(size = 7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
print(p)
}
fail_samples <- plot_df %>%
filter(VAFfilter == "Fail") %>%
pull(Sample) %>%
unique() %>%
as.character()
blacklist_samples <- unique(c(low_call_frac_samples, fail_samples, below_curve_df$Sample_name))
P856_blacklist <- blacklist_samples[grepl("^P856|^PB14458", blacklist_samples)]
P3G6_blacklist <- blacklist_samples[grepl("^P3G6|^PB11197", blacklist_samples)]
PRN4_blacklist <- blacklist_samples[grepl("^PRN4|^PB08410", blacklist_samples)]
PIA9_blacklist <- blacklist_samples[grepl("^PIA9", blacklist_samples)]
PVA9_blacklist <- blacklist_samples[grepl("^PVA9", blacklist_samples)]
PJBU_blacklist <- blacklist_samples[grepl("^PJBU", blacklist_samples)]
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
colnames(input_df)
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
perc_removed <- (length(blacklist_samples))/length(input_df_sc$Sample_name)*100
print(perc_removed)
abs_num_kept <- length(input_df_sc$Sample_name) - length(blacklist_samples)
input_df_sub <- input_df_sc[!(input_df_sc$Sample_name %in% blacklist_samples), ]
input_df_sub %>%
group_by(Novogene_ID) %>%
summarise(Number_of_sc = n())
p1 <- ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "Sample_name") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.y = element_text(angle = 90, hjust = 0.5))
ggsave("Figures/TVD_plot.pdf", plot = p1, width = 6, height = 4, units = "in")
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(size = 7, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
print(p)
ggsave(filename = paste0("Figures/VAF_QC_MAD_violinplot_", donor, ".pdf"),
plot = p, width = 6, height = 4, units = "in")
}
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(size = 4, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
print(p)
ggsave(filename = paste0("Figures/VAF_QC_MAD_violinplot_", donor, ".pdf"),
plot = p, width = 6, height = 4, units = "in")
}
p1 <- ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "Sample_name") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank(), # Optional: remove x-axis ticks
axis.text.y = element_text(angle = 90, hjust = 0.5))
ggsave("Figures/TVD_plot.pdf", plot = p1, width = 6, height = 4, units = "in")
p1 <- ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank(), # Optional: remove x-axis ticks
axis.text.y = element_text(angle = 90, hjust = 0.5))
ggsave("Figures/TVD_plot.pdf", plot = p1, width = 6, height = 4, units = "in")
p1 <- ggplot(tvd_df, aes(x = TVD, y = reorder(Sample, TVD),
fill = Flagged)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Total Variation Distance of VAF Distributions",
x = "TVD", y = "Samples") +
scale_fill_manual(values = c('#54BFB7','grey')) + theme_CHemALL() +
theme(text =  element_text(size =  7, color = 'black'),
axis.text = element_text(angle = 90, size = 5, colour = "black"),
axis.text.x = element_blank(),  # Remove x-axis text labels
axis.ticks.x = element_blank(), # Optional: remove x-axis ticks
axis.text.y = element_text(angle = 90, hjust = 0.5))
ggsave("Figures/TVD_plot.pdf", plot = p1, width = 6, height = 4, units = "in")
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(angle = 90, size = 3, color = 'black'),
axis.text = element_text(size = 5, colour = "black"))
print(p)
ggsave(filename = paste0("Figures/VAF_QC_MAD_violinplot_", donor, ".pdf"),
plot = p, width = 6, height = 4, units = "in")
}
for (donor in unique_donors) {
donor_df <- plot_df %>%
filter(Donor == donor)
# Calculate median VAF per sample
sample_medians <- donor_df %>%
group_by(Sample) %>%
summarise(median_vaf = median(VAF, na.rm = TRUE)) %>%
arrange(desc(median_vaf))
# Reorder Sample factor based on median VAF
donor_df$Sample <- factor(donor_df$Sample, levels = sample_medians$Sample)
# Plot
p <- ggplot(data = donor_df,
aes(x = Sample,
y = VAF,
fill = VAFfilter)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), alpha = 0.8) +
ggtitle(paste0('VAF distribution per single-cell sample - ', donor)) +
scale_fill_manual(values = c('Fail' = 'grey', 'Pass' = '#54BFB7')) +
theme_CHemALL() +
ggTextAxisRotate() +
theme(text = element_text(size = 7, color = 'black'),
axis.text = element_text(angle = 90, size = 4, colour = "black"))
print(p)
ggsave(filename = paste0("Figures/VAF_QC_MAD_violinplot_", donor, ".pdf"),
plot = p, width = 6, height = 4, units = "in")
}
