ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
# Define PTATO directory
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF020.RDS")
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF020.RDS")
SBSs_raw_020 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF020.RDS")
# Only autosomal
auto_chrs <- as.character(1:22)
SBSs_raw_020_autosomal <-  lapply(SBSs_raw_020, function(gr) {
keep <- seqnames(gr) %in% auto_chrs
gr2  <- gr[keep]
keepSeqlevels(gr2, auto_chrs, pruning.mode = "coarse")
}
)
# Remove all variants that are UNCALLABLE and/or with a PTAprobs < PTAprobsCutoff
SBSs_PASS_020_autosomal <- lapply(SBSs_raw_020_autosomal, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_VAF_020_autosomal <- lapply(SBSs_raw_020_autosomal, function(x) x[which(x$FILTER =="FAIL_VAF"),])
get_lengths <- function(lst) vapply(lst, length, integer(1))
counts <- tibble(
Sample    = names(SBSs_PASS_020_autosomal),
PASS      = get_lengths(SBSs_PASS_020_autosomal),
FAIL      = get_lengths(SBSs_FAIL_VAF_020_autosomal)
) |>
pivot_longer(-Sample, names_to = "Category", values_to = "Count")
counts <- counts %>%
mutate(Sample = factor(Sample, levels = unique(Sample)))
ggplot(counts, aes(x = Sample, y = Count, fill = Category)) +
geom_col(position = "stack", width = 0.8) +
scale_fill_manual(values = c(PASS = "forestgreen", FAIL = "firebrick")) +
labs(x = "Sample", y = "Number of autosomal SNVs", fill = "Filter status") +
theme_bw() +
theme(axis.text.x = element_text(size = 4, angle = 90, vjust = 0.5, hjust = 1))
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to get filtered SNVs (total + autosomal) from single cell WGS samples
# Author: Alexander Steemers
# Date: June 2025
################################################################################
# Load libraries
library(reshape2)
library(ggplot2)
library(tidyverse)
library(VariantAnnotation)
library(readxl)
library(BSgenome)
library(GenomicRanges)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/MutLoad")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/1_Input/Sample_overview.xlsx')
input_df_sc <- input_df[input_df$ResolveDNA_version %in% c("v1", "v2", "v2.0"), ]
input_df_sub <- input_df_sc[!is.na(input_df_sc$Callable_fraction) & !is.na(input_df_sc$Mean_coverage),]
# Define PTATO directory
ptato_dir <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO"
# Which patients to check
folders_to_check <- c("P3G6", "PRN4", "P856", "PIA9", "PVA9", "PJBU")
# List all snv unfiltered and filtered VCF files
#all_unfiltered_vcfs <- unlist(lapply(folders_to_check, function(subdir) {
#  list.files(
#    file.path(ptato_dir, subdir),
#    pattern = "snvs\\.ptato\\.vcf(\\.gz)?$",
#    recursive = TRUE,
#    full.names = TRUE
#  )
#}))
all_filtered_vcfs <- unlist(lapply(folders_to_check, function(subdir) {
list.files(
file.path(ptato_dir, subdir),
pattern = "snvs.*filtered\\.vcf(\\.gz)?$",
recursive = TRUE,
full.names = TRUE
)
}))
# Remove old PTATO vcf file names
#all_unfiltered_vcfs <- all_unfiltered_vcfs[!grepl("old", all_unfiltered_vcfs, ignore.case = TRUE)]
all_filtered_vcfs <- all_filtered_vcfs[!grepl("old", all_filtered_vcfs, ignore.case = TRUE)]
# These are samples that have been run through PTAv2 filtering so need to remove the first version of PTA filtering
samples_to_exclude <- c(
# Original list
"PB11197-BLASC-BCELLP1B4",
"PB11197-BLASC-BCELLP1C4",
"PB11197-BLASC-BCELLP1I4",
"PB11197-BLASC-BCELLP1J3",
"PB11197-BLASC-BCELLP1K4",
"PB11197-BLASC-BCELLP1L3",
"PB11197-BLASC-BCELLP1O3",
"PB11197-BLASC-BCELLP1P3",
"P3G6GDDABC71",
"PB14458-BLPL-BCELLP4B3",
"PB14458-BLPL-BCELLP4B5",
"PB14458-BLPL-BCELLP4C3",
"PB14458-BLPL-BCELLP4D3",
"PB14458-BLPL-BCELLP4D5",
"PB14458-BLPL-BCELLP4E3",
"PB14458-BLPL-BCELLP4J3",
"PB14458-BLPL-BCELLP4K3",
"PB14458-BLPL-BCELLP4K5",
"PB14458-BLPL-BCELLP4L3",
"PB14458-BLPL-BCELLP4L5",
"PB14458-BLPL-BCELLP4M3",
"P856GDDUBC32",
"P856GDDUBC33",
"P856GDDUBC34",
"P856GDDUBC40",
"P856GDDUBC41",
"P856GDDUBC42",
"P856GDDUBC43",
"P856GDDUBC44",
"P856GDDUBC45",
"PB14458-BLBM-BCELLP2B3",
"PB14458-BLBM-BCELLP2B4",
"PB14458-BLBM-BCELLP2C4",
"PB14458-BLBM-BCELLP2E4",
"PB14458-BLBM-BCELLP2F2",
"PB14458-BLBM-BCELLP2F4",
"PB14458-BLBM-BCELLP2I2",
"PB14458-BLBM-BCELLP2L3",
"PB14458-BLBM-BCELLP2L4",
"PB14458-BLBM-BCELLP2M4",
"PB14458-BLBM-BCELLP2N2",
"PB14458-BLBM-BCELLP2N4",
"P856GDDBBC46",
"P856GDDBBC48",
"P856GDDBBC54",
"P856GDDBBC57",
"P856GDDBBC58",
"P856GDDBBC59",
"P856GDDBBC60",
"P856GDDBBC61",
"P856GDDBBC62",
"P856GDDBBC63",
"P856GDDBBC64"
)
# Remove files matching the exclusion rule
pattern_exclude <- paste0(samples_to_exclude, collapse = "|")
pattern_exclude <- paste0("(", pattern_exclude, ").*\\.snvs\\.ptato\\.filtered\\.vcf\\.gz$")
all_filtered_vcfs <- all_filtered_vcfs[!grepl(pattern_exclude, all_filtered_vcfs, ignore.case = TRUE)]
# MinimalVAF cut-off
MinimalVAF <- 0.15
# Loop over all samples and make a list
SBSs_raw <- list()
for (Sample in input_df_sub$Sample_name) {
message("→ processing ", Sample)
filtered_vcf_path   <- all_filtered_vcfs[grepl(Sample, all_filtered_vcfs, ignore.case = TRUE)][1]
print(filtered_vcf_path) # to check if the right VCF file was used
vcf <- readVcf(filtered_vcf_path)
# Read VAF
if (!"VAF" %in% names(geno(vcf)))
stop("`geno(vcf)$VAF` not present in ", basename(filtered_vcf_path))
vaf <- geno(vcf)$VAF
if (length(dim(vaf)) == 2L)
vaf <- vaf[, 1, drop = TRUE]
# Add FILTER logic
rr <- rowRanges(vcf)
mcols(rr)$Chromosome <- as.character(seqnames(rr))
mcols(rr)$VAF    <- vaf
mcols(rr)$FILTER <- ifelse(vaf > MinimalVAF, "PASS", "FAIL_VAF")
SBSs_raw[[Sample]]  <- rr
}
# Save both autosomal and sex chromosome SNVs
saveRDS(SBSs_raw, file = "Data/total_variants_ResolveDNA_VAF015.RDS") # make sure to change minimal VAF
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
# Only autosomal
auto_chrs <- as.character(1:22)
SBSs_raw_015_autosomal <-  lapply(SBSs_raw_015, function(gr) {
keep <- seqnames(gr) %in% auto_chrs
gr2  <- gr[keep]
keepSeqlevels(gr2, auto_chrs, pruning.mode = "coarse")
}
)
# Remove all variants that are UNCALLABLE and/or with a PTAprobs < PTAprobsCutoff
SBSs_PASS_015_autosomal <- lapply(SBSs_raw_015_autosomal, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_VAF_015_autosomal <- lapply(SBSs_raw_015_autosomal, function(x) x[which(x$FILTER =="FAIL_VAF"),])
## save R objects
saveRDS(SBSs_PASS_015_autosomal, file = "Data/autosomal_PASS_variants_VAF015.RDS")
saveRDS(SBSs_FAIL_VAF_015_autosomal, file = "Data/autosomal_FAILVAF_variants_VAF015.RDS")
get_lengths <- function(lst) vapply(lst, length, integer(1))
counts <- tibble(
Sample    = names(SBSs_PASS_015_autosomal),
PASS      = get_lengths(SBSs_PASS_015_autosomal),
FAIL      = get_lengths(SBSs_FAIL_VAF_015_autosomal)
) |>
pivot_longer(-Sample, names_to = "Category", values_to = "Count")
counts <- counts %>%
mutate(Sample = factor(Sample, levels = unique(Sample)))
ggplot(counts, aes(x = Sample, y = Count, fill = Category)) +
geom_col(position = "stack", width = 0.8) +
scale_fill_manual(values = c(PASS = "forestgreen", FAIL = "firebrick")) +
labs(x = "Sample", y = "Number of autosomal SNVs", fill = "Filter status") +
theme_bw() +
theme(axis.text.x = element_text(size = 4, angle = 90, vjust = 0.5, hjust = 1))
SBSs_raw <- list()
for (Sample in input_df_sub$Sample_name) {
message("→ processing ", Sample)
filtered_vcf_path   <- all_filtered_vcfs[grepl(Sample, all_filtered_vcfs, ignore.case = TRUE)][1]
print(filtered_vcf_path) # to check if the right VCF file was used
vcf <- readVcf(filtered_vcf_path)
# Read VAF
if (!"VAF" %in% names(geno(vcf)))
stop("`geno(vcf)$VAF` not present in ", basename(filtered_vcf_path))
vaf <- geno(vcf)$VAF
if (length(dim(vaf)) == 2L)
vaf <- vaf[, 1, drop = TRUE]
# Add FILTER logic
rr <- rowRanges(vcf)
mcols(rr)$Chromosome <- as.character(seqnames(rr))
mcols(rr)$VAF    <- vaf
mcols(rr)$FILTER <- ifelse(vaf >= MinimalVAF, "PASS", "FAIL_VAF")
SBSs_raw[[Sample]]  <- rr
}
saveRDS(SBSs_raw, file = "Data/total_variants_ResolveDNA_VAF015.RDS") # make sure to change minimal VAF
SBSs_raw_015 <- readRDS(file = "Data/total_variants_ResolveDNA_VAF015.RDS")
# Only autosomal
auto_chrs <- as.character(1:22)
SBSs_raw_015_autosomal <-  lapply(SBSs_raw_015, function(gr) {
keep <- seqnames(gr) %in% auto_chrs
gr2  <- gr[keep]
keepSeqlevels(gr2, auto_chrs, pruning.mode = "coarse")
}
)
# Remove all variants that are UNCALLABLE and/or with a PTAprobs < PTAprobsCutoff
SBSs_PASS_015_autosomal <- lapply(SBSs_raw_015_autosomal, function(x) x[which(x$FILTER =="PASS"),])
SBSs_FAIL_VAF_015_autosomal <- lapply(SBSs_raw_015_autosomal, function(x) x[which(x$FILTER =="FAIL_VAF"),])
## save R objects
saveRDS(SBSs_PASS_015_autosomal, file = "Data/autosomal_PASS_variants_VAF015.RDS")
saveRDS(SBSs_FAIL_VAF_015_autosomal, file = "Data/autosomal_FAILVAF_variants_VAF015.RDS")
get_lengths <- function(lst) vapply(lst, length, integer(1))
counts <- tibble(
Sample    = names(SBSs_PASS_015_autosomal),
PASS      = get_lengths(SBSs_PASS_015_autosomal),
FAIL      = get_lengths(SBSs_FAIL_VAF_015_autosomal)
) |>
pivot_longer(-Sample, names_to = "Category", values_to = "Count")
counts <- counts %>%
mutate(Sample = factor(Sample, levels = unique(Sample)))
ggplot(counts, aes(x = Sample, y = Count, fill = Category)) +
geom_col(position = "stack", width = 0.8) +
scale_fill_manual(values = c(PASS = "forestgreen", FAIL = "firebrick")) +
labs(x = "Sample", y = "Number of autosomal SNVs", fill = "Filter status") +
theme_bw() +
theme(axis.text.x = element_text(size = 4, angle = 90, vjust = 0.5, hjust = 1))
ggsave(paste0("Figures/Mut_load_filtering_stacked_barplot_VAF015.pdf"))
################################################################################
# Manuscript: Clonal Evolution of Paediatric Burkitt Lymphoma Through Time and Space
# Description: Script to save mutational load and decide on vaf cutoffs for bulk WGS samples
# Author: Alexander Steemers
# Date: July 2025
################################################################################
# Load libraries
library(VariantAnnotation)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tibble)
# Set working directory
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Burkitt_github/3_Output/VAF")
# Load functions and plotting functions
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Samples
Patients <- c("P3G6", "PRN4", "P856", "PJBU", "PIA9", "PVA9")
Patients <- c("P3G6")
# File path template
vcf_base <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/"
vcf_suffix <- "/HaplotypeCaller/vcf/germline/gatk4haplotypecaller/"
#vcf_suffix <- "/HaplotypeCaller/vcf/germline/somatic_filtering/SMuRF/"
# Empty list to collect data
# Steps: Take only PASS variants --> only SNVs --> only autosomal --> VAF >= 0.15
all_patients_data <- list()
get_ref <- function(x) if (!is.null(x) && length(x) >= 1) as.numeric(x[1]) else NA
get_alt <- function(x) if (!is.null(x) && length(x) >= 2) as.numeric(x[2]) else NA
for (Patient in Patients) {
vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf")
vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf.gz")
#vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.SMuRF.filtered.joined.vcf")
#vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.SMuRF.filtered.joined.vcf.gz")
if (file.exists(vcf_file_unzipped)) {
vcf_file <- vcf_file_unzipped
} else if (file.exists(vcf_file_gzipped)) {
vcf_file <- vcf_file_gzipped
} else {
cat("No VCF file found for", Patient, "\n")
next
}
vcf <- readVcf(vcf_file, "hg38")
# Keep only PASS variants
vcf <- vcf[as.vector(unlist(fixed(vcf)$FILTER)) == "PASS"]
# Keep only SNVs (remove indels)
ref_allele <- as.character(ref(vcf))
alt_list <- alt(vcf)
is_snv <- mapply(function(ref, alt) {
nchar(ref) == 1 && all(nchar(as.character(alt)) == 1)
}, ref_allele, alt_list)
#vcf <- vcf[is_snv]
num_pass <- length(vcf)
cat("Patient:", Patient, "- PASS variants:", num_pass, "\n")
# Autosomes only
vcf <- vcf[seqnames(rowRanges(vcf)) %in% as.character(1:22)]
# REF / ALT depths
AD <- geno(vcf)$AD
ref_depth <- matrix(sapply(AD, get_ref), nrow = dim(AD)[1], ncol = dim(AD)[2])
alt_depth <- matrix(sapply(AD, get_alt), nrow = dim(AD)[1], ncol = dim(AD)[2])
vaf <- alt_depth / (ref_depth + alt_depth)
vaf[vaf < 0.15 | is.na(vaf)] <- NA
# Variant names
variant_ids <- paste0(seqnames(rowRanges(vcf)), ":", start(rowRanges(vcf)))
# Prepare dataframe
vaf_df <- as.data.frame(vaf)
colnames(vaf_df) <- colnames(vcf)
vaf_df$Variant <- variant_ids
# Long format
vaf_long <- pivot_longer(vaf_df, cols = -Variant, names_to = "Sample", values_to = "VAF") %>%
filter(!is.na(VAF)) %>%
mutate(Donor = Patient)
all_patients_data[[Patient]] <- vaf_long
cat("Done with Patient:", Patient, "\n")
}
View(all_patients_data)
combined_df <- do.call(rbind, all_patients_data)
View(combined_df)
P3G6_71_df <- combined_df[combined_df$Sample == "P3G6GDDABC71", ]
View(P3G6_71_df)
View(SBSs_PASS_015_autosomal)
P3G6_P1B4_df <- combined_df[combined_df$Sample == "PB11197-BLASC-BCELLP1B4", ]
View(P3G6_P1B4_df)
P3G6_msc_df <- combined_df[combined_df$Sample == "PB11197-BLBM-MSCBULK", ]
View(P3G6_msc_df)
combined_df
View(P3G6_msc_df)
View(combined_df)
Patients <- c("PRN4")
vcf_base <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/"
vcf_suffix <- "/HaplotypeCaller/vcf/germline/gatk4haplotypecaller/"
all_patients_data <- list()
get_ref <- function(x) if (!is.null(x) && length(x) >= 1) as.numeric(x[1]) else NA
get_alt <- function(x) if (!is.null(x) && length(x) >= 2) as.numeric(x[2]) else NA
for (Patient in Patients) {
vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf")
vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf.gz")
#vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.SMuRF.filtered.joined.vcf")
#vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.SMuRF.filtered.joined.vcf.gz")
if (file.exists(vcf_file_unzipped)) {
vcf_file <- vcf_file_unzipped
} else if (file.exists(vcf_file_gzipped)) {
vcf_file <- vcf_file_gzipped
} else {
cat("No VCF file found for", Patient, "\n")
next
}
vcf <- readVcf(vcf_file, "hg38")
# Keep only PASS variants
vcf <- vcf[as.vector(unlist(fixed(vcf)$FILTER)) == "PASS"]
# Keep only SNVs (remove indels)
ref_allele <- as.character(ref(vcf))
alt_list <- alt(vcf)
is_snv <- mapply(function(ref, alt) {
nchar(ref) == 1 && all(nchar(as.character(alt)) == 1)
}, ref_allele, alt_list)
#vcf <- vcf[is_snv]
num_pass <- length(vcf)
cat("Patient:", Patient, "- PASS variants:", num_pass, "\n")
# Autosomes only
vcf <- vcf[seqnames(rowRanges(vcf)) %in% as.character(1:22)]
# REF / ALT depths
AD <- geno(vcf)$AD
ref_depth <- matrix(sapply(AD, get_ref), nrow = dim(AD)[1], ncol = dim(AD)[2])
alt_depth <- matrix(sapply(AD, get_alt), nrow = dim(AD)[1], ncol = dim(AD)[2])
vaf <- alt_depth / (ref_depth + alt_depth)
vaf[vaf < 0.15 | is.na(vaf)] <- NA
# Variant names
variant_ids <- paste0(seqnames(rowRanges(vcf)), ":", start(rowRanges(vcf)))
# Prepare dataframe
vaf_df <- as.data.frame(vaf)
colnames(vaf_df) <- colnames(vcf)
vaf_df$Variant <- variant_ids
# Long format
vaf_long <- pivot_longer(vaf_df, cols = -Variant, names_to = "Sample", values_to = "VAF") %>%
filter(!is.na(VAF)) %>%
mutate(Donor = Patient)
all_patients_data[[Patient]] <- vaf_long
cat("Done with Patient:", Patient, "\n")
}
View(all_patients_data)
combined_df <- do.call(rbind, all_patients_data)
unique(combined_df$Sample)
PRN4_P1B11_df <- combined_df[combined_df$Sample == "PB08410-BLLN-BCELLP1B11", ]
View(PRN4_P1B11_df)
vcf_base <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/"
#vcf_suffix <- "/HaplotypeCaller/vcf/germline/gatk4haplotypecaller/"
vcf_suffix <- "/HaplotypeCaller/vcf/germline/somatic_filtering/SMuRF/"
Patients <- c("P3G6")
vcf_base <- "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/"
#vcf_suffix <- "/HaplotypeCaller/vcf/germline/gatk4haplotypecaller/"
vcf_suffix <- "/HaplotypeCaller/vcf/germline/somatic_filtering/SMuRF/"
all_patients_data <- list()
get_ref <- function(x) if (!is.null(x) && length(x) >= 1) as.numeric(x[1]) else NA
get_alt <- function(x) if (!is.null(x) && length(x) >= 2) as.numeric(x[2]) else NA
for (Patient in Patients) {
#vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf")
#vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf.gz")
vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".SMuRF.filtered.sorted.VAF03.vcf")
vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".SMuRF.filtered.sorted.VAF03.vcf.gz")
if (file.exists(vcf_file_unzipped)) {
vcf_file <- vcf_file_unzipped
} else if (file.exists(vcf_file_gzipped)) {
vcf_file <- vcf_file_gzipped
} else {
cat("No VCF file found for", Patient, "\n")
next
}
vcf <- readVcf(vcf_file, "hg38")
# Keep only PASS variants
vcf <- vcf[as.vector(unlist(fixed(vcf)$FILTER)) == "PASS"]
# Keep only SNVs (remove indels)
ref_allele <- as.character(ref(vcf))
alt_list <- alt(vcf)
is_snv <- mapply(function(ref, alt) {
nchar(ref) == 1 && all(nchar(as.character(alt)) == 1)
}, ref_allele, alt_list)
#vcf <- vcf[is_snv]
num_pass <- length(vcf)
cat("Patient:", Patient, "- PASS variants:", num_pass, "\n")
# Autosomes only
vcf <- vcf[seqnames(rowRanges(vcf)) %in% as.character(1:22)]
# REF / ALT depths
AD <- geno(vcf)$AD
ref_depth <- matrix(sapply(AD, get_ref), nrow = dim(AD)[1], ncol = dim(AD)[2])
alt_depth <- matrix(sapply(AD, get_alt), nrow = dim(AD)[1], ncol = dim(AD)[2])
vaf <- alt_depth / (ref_depth + alt_depth)
vaf[vaf < 0.15 | is.na(vaf)] <- NA
# Variant names
variant_ids <- paste0(seqnames(rowRanges(vcf)), ":", start(rowRanges(vcf)))
# Prepare dataframe
vaf_df <- as.data.frame(vaf)
colnames(vaf_df) <- colnames(vcf)
vaf_df$Variant <- variant_ids
# Long format
vaf_long <- pivot_longer(vaf_df, cols = -Variant, names_to = "Sample", values_to = "VAF") %>%
filter(!is.na(VAF)) %>%
mutate(Donor = Patient)
all_patients_data[[Patient]] <- vaf_long
cat("Done with Patient:", Patient, "\n")
}
all_patients_data <- list()
get_ref <- function(x) if (!is.null(x) && length(x) >= 1) as.numeric(x[1]) else NA
get_alt <- function(x) if (!is.null(x) && length(x) >= 2) as.numeric(x[2]) else NA
for (Patient in Patients) {
#vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf")
#vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, ".vep.vcf.gz")
vcf_file_unzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, "_bulk.vep.SMuRF.filtered.sorted.VAF03.vcf")
vcf_file_gzipped <- paste0(vcf_base, Patient, vcf_suffix, Patient, "_bulk.vep.SMuRF.filtered.sorted.VAF03.vcf.gz")
if (file.exists(vcf_file_unzipped)) {
vcf_file <- vcf_file_unzipped
} else if (file.exists(vcf_file_gzipped)) {
vcf_file <- vcf_file_gzipped
} else {
cat("No VCF file found for", Patient, "\n")
next
}
vcf <- readVcf(vcf_file, "hg38")
# Keep only PASS variants
vcf <- vcf[as.vector(unlist(fixed(vcf)$FILTER)) == "PASS"]
# Keep only SNVs (remove indels)
ref_allele <- as.character(ref(vcf))
alt_list <- alt(vcf)
is_snv <- mapply(function(ref, alt) {
nchar(ref) == 1 && all(nchar(as.character(alt)) == 1)
}, ref_allele, alt_list)
#vcf <- vcf[is_snv]
num_pass <- length(vcf)
cat("Patient:", Patient, "- PASS variants:", num_pass, "\n")
# Autosomes only
vcf <- vcf[seqnames(rowRanges(vcf)) %in% as.character(1:22)]
# REF / ALT depths
AD <- geno(vcf)$AD
ref_depth <- matrix(sapply(AD, get_ref), nrow = dim(AD)[1], ncol = dim(AD)[2])
alt_depth <- matrix(sapply(AD, get_alt), nrow = dim(AD)[1], ncol = dim(AD)[2])
vaf <- alt_depth / (ref_depth + alt_depth)
vaf[vaf < 0.15 | is.na(vaf)] <- NA
# Variant names
variant_ids <- paste0(seqnames(rowRanges(vcf)), ":", start(rowRanges(vcf)))
# Prepare dataframe
vaf_df <- as.data.frame(vaf)
colnames(vaf_df) <- colnames(vcf)
vaf_df$Variant <- variant_ids
# Long format
vaf_long <- pivot_longer(vaf_df, cols = -Variant, names_to = "Sample", values_to = "VAF") %>%
filter(!is.na(VAF)) %>%
mutate(Donor = Patient)
all_patients_data[[Patient]] <- vaf_long
cat("Done with Patient:", Patient, "\n")
}
vcf_file_gzipped
vcf_file_unzipped
