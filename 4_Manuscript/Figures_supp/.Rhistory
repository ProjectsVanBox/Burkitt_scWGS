tree = prepare_tree(tree)
# plot bare tree
plot_gg_tree_base(tree)
plot_gg_tree(tree)
plot_gg_tree(tree, add_branch_length = TRUE, add_bootstrap = TRUE)
plot_gg_tree(tree, add_branch_length = TRUE, add_bootstrap = F, add_tip_label = F, add_title = "PZ8J")
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
branch_grl = convert_vcf_to_granges(branch_vcf_list = branch_vcf, ref_genome = ref_genome)
# profile per branch --> can be used for any MutationalPatterns analysis separate from the tree
branch_mm = mut_matrix(branch_grl, ref_genome)
### Refitting part
sub_sig <- signatures[,c("SBSblood", "SBS1", "SBS9", "SBS18", "SBS13", "SBS2")]
contribution <- fit_to_signatures_strict_tree(mut_matrix = branch_mm, signatures = sub_sig, max_delta = 0.01, remove_min = 20)
# check if all branches are explained well with these signatures: cosine < 0.85 with > 200 mutations would suggest you miss a mutation
check_reconstructed_cosine(contribution, branch_mm, sub_sig, tree) +
ylim(0,1)
# add signature contributions to your tree
tree = add_contribution(tree, contribution = contribution) # if you already did signature_fitting
t
#tree = add_contribution(tree, signatures = sigs_slct, mut_matrix = branch_mm) # if you did not yet fit signatures
plot_tree_contribution_bars(tree = tree, signatures = sub_sig, mut_matrix = branch_mm) # give signatures and branch_mut_matrix
#######################functions to make callable loci-corrected trees
# Function to calculate the product of (1 - sensitivity) for each sample in a node
calculate_product_sensitivity <- function(samples, df_sensitivity) {
# Split the 'samples' string by '|'
sample_list <- strsplit(samples, "\\|")[[1]]
# Retrieve sensitivities for these samples
sensitivities <- df_sensitivity$sensitivity[df_sensitivity$SAMPLE %in% sample_list]
# Calculate the product of (1 - sensitivity)
1 - prod(1 - sensitivities)
}
# function to take a tree and correct the branch lengths based on the product sensitivity
## by calculating the product of (1 - sensitivity) for each sample in a node
# requires samples (=samples column from output of cellphywrapper object: tree@data$samples .
# requires a CALLABLE df (=containing columns SAMPLES and CALLABLE (in nr of bases))
correct_branches <- function(tree, callable_df){
# get sensitivity df by taking fraction of total possible callable loci
max_callable <- 2745186691
callable_df$sensitivity <- callable_df$CALLABLE / max_callable
sensitivity_df <- callable_df[c('SAMPLE','sensitivity')]
print(sensitivity_df)
# calculate the sensitivity per node/branch using the calculate_product_sensitivity function
tree@data$product_sensitivity <- sapply(tree@data$samples, calculate_product_sensitivity, sensitivity_df)
# correct the branch lengths
tree@data$corr_branch_lengths <- tree@data$branch_length / tree@data$product_sensitivity
print(tree@data$branch_length)
print(tree@data$corr_branch_lengths)
tree@data$corr_branch_lengths[is.na(tree@data$corr_branch_lengths)] <- 0 # for merged germline sample
# store also in the phylo object, required for downstream analyses based on the phylo object
tree@phylo$edge.length <- tree@data[order(tree@data$node),]$corr_branch_lengths
# store in branch_length column for cellphyplotting use
tree@data$branch_length <- tree@data$corr_branch_lengths
print(tree@phylo$edge.length)
return(tree)
}
############## use example
library(tidyverse)
library(reshape2)
library(ggtree)
library(treeio)
library(stringi)
library(cellPhyWrapperPlotting)  #devtools::install_local("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/Scripts/cellPhyWrapperPlotting/",force = TRUE)
library(phangorn)
library(ggplot2)
library(patchwork)
# first create or import 'sensitivity DF' for the donor >> created using /LTHIT/2_Code/merged/UltraMetricTrees/01_retrieve_CL_for_all_samples.sh
callable_df_PZ8J <- read_delim('~/hpc/pmc_vanboxtel/projects/Lymphoma/2_Code/2_scripts/CallableLoci/PZ8J_callableloci_2.txt')
for (i in c(1,15,2,3,4)) {
# Construct the path to the current tree file
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PZ8J/PZ8J_ptato_filtered_CellPhy_exc_samp_v2_0", i, "/TreeObject0.", i, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
# Correct the branches
corrected_tree <- correct_branches(tree, callable_df_PZ8J)
# Plot before and after
plot_before <- plot_gg_tree(tree)
plot_after <- plot_gg_tree(corrected_tree, add_title = "PZ8J phylogenetic tree with corrected branches", add_tip_label = F)
# Combine and title
combined_plot <- (plot_before / plot_after) + plot_annotation(title = paste("TreeObject0.", i, sep = ""))
# Display
print(combined_plot)
# Optionally compare trees
#comparePhylo(tree@phylo, corrected_tree@phylo, force.rooted = TRUE, plot = TRUE, use.edge.length = FALSE)
}
normal_samples <- c(
"PZ8JGPDLBC03",
"PZ8JGPDLBC04",
"PZ8JGPDLBC02",
"PZ8JGPDLBC06",
"PZ8JGPDLBC05",
"PZ8JGPDLBC01"
)
excluded_samples <- c("PZ8JGPDLHR02", "PZ8JGPDLHR01", "PZ8JGPDLHR13", "PZ8JGPDLHR14", "PZ8JGPDLHR11")
callable_df_PZ8J_sub <- callable_df_PZ8J$SAMPLE %in% excluded_samples
callable_df_PZ8J_filtered <- callable_df_PZ8J[!callable_df_PZ8J_sub, ]
callable_df_PZ8J_filtered$SNV_norm <- (2745186691/callable_df_PZ8J_filtered$CALLABLE) * callable_df_PZ8J_filtered$SNV_LOAD
# Calculate averages
snv_avg_summary <- callable_df_PZ8J_filtered %>%
mutate(group = if_else(SAMPLE %in% normal_samples, "normal", "tumor")) %>%
group_by(group) %>%
summarise(avg_snv_load = mean(SNV_norm, na.rm = TRUE))
snv_avg_summary
# Read the tree object
tree <- readRDS(tree_path)
corrected_tree <- correct_branches(tree, callable_df_PZ8J)
corrected_tree@data$branch_length <- as.integer(corrected_tree@data$branch_length)
plot_gg_tree(corrected_tree, add_title = "PZ8J phylogenetic tree with corrected branches", add_tip_label = T, add_branch_length = T)
# Construct the path to the current tree file
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PZ8J/PZ8J_ptato_filtered_CellPhy_exc_samp_v3_0", i, "/TreeObject0.", i, ".RDS")
for (i in c(1,15,2,3,4)) {
# Construct the path to the current tree file
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PZ8J/PZ8J_ptato_filtered_CellPhy_exc_samp_v3_0", i, "/TreeObject0.", i, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
# Correct the branches
corrected_tree <- correct_branches(tree, callable_df_PZ8J)
# Plot before and after
plot_before <- plot_gg_tree(tree)
plot_after <- plot_gg_tree(corrected_tree, add_title = "PZ8J phylogenetic tree with corrected branches", add_tip_label = F)
# Combine and title
combined_plot <- (plot_before / plot_after) + plot_annotation(title = paste("TreeObject0.", i, sep = ""))
# Display
print(combined_plot)
# Optionally compare trees
#comparePhylo(tree@phylo, corrected_tree@phylo, force.rooted = TRUE, plot = TRUE, use.edge.length = FALSE)
}
for (i in c(1,15,2,3,4)) {
# Construct the path to the current tree file
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PZ8J/PZ8J_ptato_filtered_CellPhy_exc_samp_v2_0", i, "/TreeObject0.", i, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
# Correct the branches
corrected_tree <- correct_branches(tree, callable_df_PZ8J)
# Plot before and after
plot_before <- plot_gg_tree(tree)
plot_after <- plot_gg_tree(corrected_tree, add_title = "PZ8J phylogenetic tree with corrected branches", add_tip_label = F)
# Combine and title
combined_plot <- (plot_before / plot_after) + plot_annotation(title = paste("TreeObject0.", i, sep = ""))
# Display
print(combined_plot)
# Optionally compare trees
#comparePhylo(tree@phylo, corrected_tree@phylo, force.rooted = TRUE, plot = TRUE, use.edge.length = FALSE)
}
normal_samples <- c(
"PZ8JGPDLBC03",
"PZ8JGPDLBC04",
"PZ8JGPDLBC02",
"PZ8JGPDLBC06",
"PZ8JGPDLBC05",
"PZ8JGPDLBC01"
)
excluded_samples <- c("PZ8JGPDLHR02", "PZ8JGPDLHR01", "PZ8JGPDLHR13", "PZ8JGPDLHR14", "PZ8JGPDLHR11")
callable_df_PZ8J_sub <- callable_df_PZ8J$SAMPLE %in% excluded_samples
callable_df_PZ8J_filtered <- callable_df_PZ8J[!callable_df_PZ8J_sub, ]
callable_df_PZ8J_filtered$SNV_norm <- (2745186691/callable_df_PZ8J_filtered$CALLABLE) * callable_df_PZ8J_filtered$SNV_LOAD
# Calculate averages
snv_avg_summary <- callable_df_PZ8J_filtered %>%
mutate(group = if_else(SAMPLE %in% normal_samples, "normal", "tumor")) %>%
group_by(group) %>%
summarise(avg_snv_load = mean(SNV_norm, na.rm = TRUE))
snv_avg_summary
# Conclusion: TreeObject0.1 is the best option (same as TreeObject0.15)
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PZ8J/PZ8J_ptato_filtered_CellPhy_exc_samp_v2_0", 1, "/TreeObject0.", 1, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
corrected_tree <- correct_branches(tree, callable_df_PZ8J)
corrected_tree@data$branch_length <- as.integer(corrected_tree@data$branch_length)
plot_gg_tree(corrected_tree, add_title = "PZ8J phylogenetic tree with corrected branches", add_tip_label = T, add_branch_length = T)
### ####################functions to make callable loci-corrected trees
# Function to calculate the product of (1 - sensitivity) for each sample in a node
calculate_product_sensitivity <- function(samples, df_sensitivity) {
# Split the 'samples' string by '|'
sample_list <- strsplit(samples, "\\|")[[1]]
# Retrieve sensitivities for these samples
sensitivities <- df_sensitivity$sensitivity[df_sensitivity$SAMPLE %in% sample_list]
# Calculate the product of (1 - sensitivity)
1 - prod(1 - sensitivities)
}
# function to take a tree and correct the branch lengths based on the product sensitivity
## by calculating the product of (1 - sensitivity) for each sample in a node
# requires samples (=samples column from output of cellphywrapper object: tree@data$samples .
# requires a CALLABLE df (=containing columns SAMPLES and CALLABLE (in nr of bases))
correct_branches <- function(tree, callable_df){
# get sensitivity df by taking fraction of total possible callable loci
max_callable <- 2745186691
callable_df$sensitivity <- callable_df$CALLABLE / max_callable
sensitivity_df <- callable_df[c('SAMPLE','sensitivity')]
print(sensitivity_df)
# calculate the sensitivity per node/branch using the calculate_product_sensitivity function
tree@data$product_sensitivity <- sapply(tree@data$samples, calculate_product_sensitivity, sensitivity_df)
# correct the branch lengths
tree@data$corr_branch_lengths <- tree@data$branch_length / tree@data$product_sensitivity
print(tree@data$branch_length)
print(tree@data$corr_branch_lengths)
tree@data$corr_branch_lengths[is.na(tree@data$corr_branch_lengths)] <- 0 # for merged germline sample
# store also in the phylo object, required for downstream analyses based on the phylo object
tree@phylo$edge.length <- tree@data[order(tree@data$node),]$corr_branch_lengths
# store in branch_length column for cellphyplotting use
tree@data$branch_length <- tree@data$corr_branch_lengths
print(tree@phylo$edge.length)
return(tree)
}
############## use example
library(tidyverse)
library(reshape2)
library(ggtree)
library(treeio)
library(stringi)
library(cellPhyWrapperPlotting)  #devtools::install_local("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/Scripts/cellPhyWrapperPlotting/",force = TRUE)
library(phangorn)
library(ggplot2)
library(patchwork)
# first create or import 'sensitivity DF' for the donor >> created using /LTHIT/2_Code/merged/UltraMetricTrees/01_retrieve_CL_for_all_samples.sh
callable_df_PDT7 <- read_delim('~/hpc/pmc_vanboxtel/projects/Lymphoma/2_Code/2_scripts/CallableLoci/PDT7_callableloci.txt')
for (i in c(1,15,2,3,4)) {
# Construct the path to the current tree file
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PDT7/PDT7_ptato_filtered_CellPhy_exc_samp_v3_0", i, "/TreeObject0.", i, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
# Correct the branches
corrected_tree <- correct_branches(tree, callable_df_PDT7)
# Plot before and after
plot_before <- plot_gg_tree(tree)
plot_after <- plot_gg_tree(corrected_tree)
# Combine and title
combined_plot <- (plot_before / plot_after) + plot_annotation(title = paste("TreeObject0.", i, sep = ""))
# Display
print(combined_plot)
# Optionally compare trees
#comparePhylo(tree@phylo, corrected_tree@phylo, force.rooted = TRUE, plot = TRUE, use.edge.length = FALSE)
}
normal_samples <- c(
"PDT7GPDLBC01",
"PDT7GPDLBC02",
"PDT7GPDLBC03",
"PDT7GPDLBC04",
"PDT7GPDLBC05",
"PDT7GPDLBC06",
"PMC25993-LNPTA-HRS1C5"
)
excluded_samples <- c("PMC25993-LNPTA-BCELL1C3",
"PMC25993-LNPTA-HRS2E4",
"PDT7GPDLHR06",
"PDT7GPDLHR02",
"PB31727-HRSLN-HRSCELLSP2C9",
"PDT7GPDLHR09",
"PDT7GPDLHR14",
"PMC25993-LNPTA-HRS1C5",
"PDT7GPDLHR01")
callable_df_PDT7_sub <- callable_df_PDT7$SAMPLE %in% excluded_samples
callable_df_PDT7_filtered <- callable_df_PDT7[!callable_df_PDT7_sub, ]
callable_df_PDT7_filtered$SNV_norm <- (2745186691/callable_df_PDT7_filtered$CALLABLE) * callable_df_PDT7_filtered$SNV_LOAD
# Calculate averages
snv_avg_summary <- callable_df_PDT7_filtered %>%
mutate(group = if_else(SAMPLE %in% normal_samples, "normal", "tumor")) %>%
group_by(group) %>%
summarise(avg_snv_load = mean(SNV_norm, na.rm = TRUE))
snv_avg_summary
# Conclusion: TreeObject0.15 is the best option
tree_path <- paste0("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PDT7/PDT7_ptato_filtered_CellPhy_exc_samp_v3_0", 15, "/TreeObject0.", 15, ".RDS")
# Read the tree object
tree <- readRDS(tree_path)
corrected_tree <- correct_branches(tree, callable_df_PDT7)
corrected_tree@data$branch_length <- as.integer(corrected_tree@data$branch_length)
plot_gg_tree(corrected_tree, add_title = "PDT7 phylogenetic tree with corrected branches", add_tip_label = T, add_branch_length = T)
library(tidyverse)
library(ggtree)
library(treeio)
library(stringi)
library(stringdist)
library(BSgenome.Hsapiens.NCBI.GRCh38)
library(ggnewscale)
ref_genome = 'BSgenome.Hsapiens.NCBI.GRCh38'
library(MutationalPatterns)
library(VariantAnnotation)
#theme_set(theme_tree()) --> does not work with 96 plot
theme_set(theme_classic())
library(readxl)
library(cellPhyWrapperPlotting) #devtools::install_local("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/Scripts/cellPhyWrapperPlotting/",force = TRUE)
source("~/surfdrive/Shared/pmc_vanboxtel/general/2_Bioinformatics/colors/Jurrians_colors.R")
tree = readRDS("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/TreeBuilding/PDT7/PDT7_ptato_filtered_CellPhy_exc_samp_v3_015/TreeObject0.15.RDS")
vcf = VariantAnnotation::readVcf("~/hpc/pmc_vanboxtel/projects/Lymphoma/1_Input/TreeBuilding/PDT7/PDT7_ptato_filtered_snv_exc_samples.vcf")
# prepare tree
tree = prepare_tree(tree)
# plot bare tree
plot_gg_tree_base(tree)
plot_gg_tree(tree)
plot_gg_tree(tree, add_branch_length = TRUE, add_bootstrap = TRUE)
plot_gg_tree(tree, add_branch_length = TRUE, add_bootstrap = F, add_tip_label = F, add_title = "PDT7")
# VCF per branch
branch_vcf = extract_vcf_per_branch(tree = tree, vcf = vcf, ref_genome = ref_genome)
branch_grl = convert_vcf_to_granges(branch_vcf_list = branch_vcf, ref_genome = ref_genome)
# profile per branch --> can be used for any MutationalPatterns analysis separate from the tree
branch_mm = mut_matrix(branch_grl, ref_genome)
a
### Get signatures
signatures = get_known_signatures()
sbsblood <- read.table("~/Downloads/sigfit_cosmic3_bloodsig_Aug2020.txt", sep = "\t", header = T)
sbsblood = as.matrix(sbsblood)
SBSblood <- as.numeric(sbsblood[,"Signature.Blood"])
signatures <- cbind(SBSblood, signatures)
### Refitting part
#sub_sig <- signatures[,c("PTA_v1","SBSblood", "SBS1", "SBS9", "SBS18", "SBS13", "SBS2")] # Choosen after performing mutational signatures on all Burkitt samples
sub_sig <- signatures[,c("SBSblood", "SBS1", "SBS9", "SBS18", "SBS13", "SBS2")]
contribution <- fit_to_signatures_strict_tree(mut_matrix = branch_mm, signatures = sub_sig, max_delta = 0.01, remove_min = 20)
# check if all branches are explained well with these signatures: cosine < 0.85 with > 200 mutations would suggest you miss a mutation
check_reconstructed_cosine(contribution, branch_mm, sub_sig, tree) +
ylim(0,1)
# add signature contributions to your tree
tree = add_contribution(tree, contribution = contribution) # if you already did signature_fitting
#tree = add_contribution(tree, signatures = sigs_slct, mut_matrix = branch_mm) # if you did not yet fit signatures
plot_tree_contribution_bars(tree = tree, signatures = sub_sig, mut_matrix = branch_mm) # give signatures and branch_mut_matrix
my_data <- readRDS("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/scRNAseq/integration/objects/srat_sortseq.RDS")
View(my_data)
my_data_singleron <- readRDS("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/scRNAseq/integration/objects/srat_singleron.RDS")
my_data_combined <- readRDS("~/hpc/pmc_vanboxtel/projects/Lymphoma/3_Output/scRNAseq/integration/objects/srat_combined.RDS")
View(my_data_singleron)
View(my_data_combined)
my_data_combined@assays[["RNA"]]@features
my_data_combined
counts_matrix <- GetAssayData(my_data_combined, slot = "counts")
View(counts_matrix)
counts_matrix["CD3D", 1:5]  # first 5 cells
counts_matrix <- GetAssayData(my_data_combined, layer = "counts")
counts_matrix["CD3D", 1:5]  # first 5 cells
DefaultAssay(my_data_combined)
Layers(my_data_combined[["RNA"]])
View(my_data_combined)
counts_raw <- GetAssayData(my_data_combined[["RNA"]], layer = "counts")
counts_raw["CD3D", 1:5]  # first 5 cells
View(my_data_combined)
counts_matrix <- GetAssayData(my_data_singleron, layer = "counts")
counts_matrix["CD3D", 1:5]  # first 5 cells
# Load libraries
library(VariantAnnotation)
library(ggplot2)
library(dplyr)
library(ChIPpeakAnno)
library(ggplot2)
library(RColorBrewer)
library(tibble)
library(reshape2)
library(readxl)
library(grid)
library(tidyverse)
# Set filepath
setwd("~/surfdrive/Shared/pmc_vanboxtel/projects/Lymphoma_scWGS/3_Output/Burkitt_paper/Figures_supp/")
# Set date
date <- format(Sys.Date(), "%Y%m%d")
# Load functions and color palettes
mycols_paired <- brewer.pal(12,"Paired")
mycols_dark2 <- brewer.pal(8, "Dark2")
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/PTATO_Ageline_checks/GeneralFunctions.R')
source('~/hpc/pmc_vanboxtel/projects/CHemALL/2_Code/theme_CHemALL.R')
# Load metadata
below_curve_df <-  read.csv("../../../1_Input/Burkitt_paper/below_curve_samples.csv")
bad_baf_df <-  read.csv("../../../1_Input/Burkitt_paper/bad_baf_samples.csv")
input_df <-  read_excel('~/surfdrive/Shared/pmc_vanboxtel/projects/Lymphoma_scWGS/1_Input/Burkitt_paper/Sample_overview.xlsx')
# Label input_df with residual info
input_df <- input_df %>%
mutate(Below_curve = if_else(Sample_name %in% below_curve_df$Sample_name, "Yes", "No"))
# Load vcf files of samples
vcf_files_P3G6_b1 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/batch1/snvs/batch1",
pattern = "*/*snvs.ptato.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_P3G6_b1 <- vcf_files_P3G6_b1[str_detect(vcf_files_P3G6_b1, "batch1_P3G6GPDABC26|batch1_P3G6GPDABC27")]
vcf_files_P3G6_b2 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/batch2/snvs/batch2",
pattern = "*/*snvs.ptato.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_P3G6_b2 <- vcf_files_P3G6_b2[!str_detect(vcf_files_P3G6_b2, "batch2_PB11197-BLASC-BCELLP1O3|batch2_PB11197-BLASC-BCELLP1P3")]
vcf_files_P3G6_ptav2 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P3G6/PTAv2/",
pattern = "*/*snvs.ptatoV2.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_PRN4_b1 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/PRN4/batch1/snvs/batch1",
pattern = "*/*snvs.ptato.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_PRN4_b2 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/PRN4/batch2/snvs/batch2",
pattern = "*/*snvs.ptato.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_PRN4_b3 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/PRN4/batch3/snvs/batch3",
pattern = "*/*snvs.ptato.filtered.vcf.gz$", full.names = TRUE, recursive = TRUE )
vcf_files_P856_ptav2 <- list.files(path = "~/hpc/pmc_vanboxtel/projects/Burkitt/3_Output/PTATO/P856/PTAv2",
pattern = "*/*snvs.ptatoV2.filtered.vcf$", full.names = TRUE, recursive = TRUE )
vcf_files <- c(vcf_files_P3G6_b1, vcf_files_P3G6_b2, vcf_files_P3G6_ptav2, vcf_files_PRN4_b1, vcf_files_PRN4_b2, vcf_files_PRN4_b3, vcf_files_P856_ptav2)
vcf_files <- vcf_files[!str_detect(vcf_files, "PRN4GBDLBC72")] #bulk sample
vcf_list <- lapply(vcf_files, function(f) {
readVcf(f, genome = "hg38")
})
# Extract VAF per sample function
vaf_df <- do.call(rbind, lapply(seq_along(vcf_list), function(i) {
vcf <- vcf_list[[i]]
sample_name <- colnames(vcf)
# Check if VAF field exists and is not empty
if ("VAF" %in% names(geno(vcf))) {
vafs <- geno(vcf)$VAF[, 1]  # Extract VAFs for the single sample
data.frame(Sample_name = sample_name, VAF = as.numeric(vafs))
} else {
message(paste("Skipping", sample_name, "- no VAF field"))
NULL
}
}))
# Add patient-specific IDs
vaf_df <- left_join(vaf_df, input_df[, c("Sample_name", "Novogene_ID", "BAF", "Below_curve")],
by = c("Sample_name" = "Sample_name"))
# Calculate quantiles and median
median_df <- vaf_df %>%
group_by(Sample_name) %>%
summarise(
Novogene_ID = dplyr::first(Novogene_ID),
Median = quantile(VAF, 0.5, na.rm = TRUE),
BAF = dplyr::first(BAF),
Below_curve = dplyr::first(Below_curve)
)
# Assign fill color based on residual cutoff
vaf_df$ResidualColor <- ifelse(vaf_df$Below_curve == "Yes",  "lightblue", "lightgrey")
vaf_df$BafColor <- ifelse(vaf_df$BAF == "Bad", "lightgrey",
ifelse(vaf_df$BAF == "Intermediate", "lightblue", "deepskyblue4"))
unique_samples <- unique(vaf_df$Novogene_ID)
# Loop over each Patient
for (sample_id in unique_samples) {
sample_data <- vaf_df %>%
filter(Novogene_ID == sample_id)
sample_median <- median_df %>%
filter(Novogene_ID == sample_id)
novogene_label <- unique(sample_data$Novogene_ID)
novogene_label <- ifelse(is.na(novogene_label), sample_id, novogene_label)
ordered_samples <- sample_median %>%
arrange(desc(Median)) %>%
pull(Sample_name)
sample_data$Sample_name <- factor(sample_data$Sample_name, levels = ordered_samples)
sample_median$Sample_num <- match(sample_median$Sample_name, levels(sample_data$Sample_name))
p1 <- ggplot(sample_data, aes(x = Sample_name, y = VAF)) +
geom_violin(aes(fill = ResidualColor), trim = TRUE, color = "black") +
geom_segment(data = sample_median,
aes(x = Sample_num - 0.4, xend = Sample_num + 0.3,
y = Median, yend = Median),
inherit.aes = FALSE, color = "black", linewidth = 0.6) +
geom_hline(yintercept = 0.4, linetype = "dashed", color = "red") +
scale_fill_identity() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = paste("VAF Distribution for", novogene_label),
x = "Sample",
y = "Variant Allele Frequency") +
coord_cartesian(ylim = c(0, 1))  # safer than using ylim()
ggsave(filename = paste0("VAF_distribution_with_residual_info_", novogene_label, "_", date, ".pdf"),
plot = p1, width = 5, height = 4)
p2 <- ggplot(sample_data, aes(x = Sample_name, y = VAF)) +
geom_violin(aes(fill = BafColor), trim = TRUE, color = "black") +
geom_segment(data = sample_median,
aes(x = Sample_num - 0.4, xend = Sample_num + 0.3,
y = Median, yend = Median),
inherit.aes = FALSE, color = "black", linewidth = 0.6) +
geom_hline(yintercept = 0.4, linetype = "dashed", color = "red") +
scale_fill_identity() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = paste("VAF Distribution for", novogene_label),
x = "Sample",
y = "Variant Allele Frequency") +
coord_cartesian(ylim = c(0, 1))  # safer than using ylim()
ggsave(filename = paste0("VAF_distribution_with_BAF_info_", novogene_label, "_", date, ".pdf"),
plot = p2, width = 5, height = 4)
}
# List samples with no VAF=1 variants as these will be probably doublets
vaf1_df <- vaf_df %>%
group_by(Sample_name) %>%
summarise(VAF1_count = sum(abs(VAF - 1) < 1e-6)) %>%
arrange(desc(VAF1_count))
no_vaf1 <- as.character(vaf1_df$Sample_name[vaf1_df$VAF1_count == 0])
no_vaf1_df <- vaf1_df %>%
filter((Sample_name %in% no_vaf1))
write.csv(no_vaf1_df, file = "../../../1_Input/Burkitt_paper/samples_with_no_vaf1.csv", row.names = F)
# Samples with low median VAF
median_df <- median_df %>%
mutate(VAF_low = if_else(Median < 0.4, "Yes", "No"))
low_vaf_df <- median_df %>%
filter(VAF_low == "Yes")
low_vaf_df <- low_vaf_df %>%
filter(!(BAF == "Bad" | Below_curve == "Yes"))
View(low_vaf_df)
View(vaf1_df)
View(median_df)
balcklist_df <- median_df %>%
filter(!(VAF_low == "Yes" &
Below_curve == "Yes" &
BAF %in% c("Intermediate", "Good")))
View(balcklist_df)
balcklist_df <- median_df %>%
filter(!(VAF_low == "Yes" |
Below_curve == "Yes" |
BAF %in% c("Intermediate", "Good")))
View(balcklist_df)
View(balcklist_df)
blacklist_df <- median_df %>%
filter(
VAF_low != "Yes" &
Below_curve != "Yes" &
!(BAF %in% c("Intermediate", "Good"))
)
View(balcklist_df)
View(blacklist_df)
blacklist_df <- median_df %>%
filter(BAF == "Bad" | VAF_low == "Yes" | Below_curve == "Yes")
View(blacklist_df)
perc_removed <- (length(blacklist_df$Sample_name))/length(input_df$Sample_name)*100
print(perc_removed)
length(blacklist_df$Sample_name)
length(input_df$Sample_name)
View(input_df)
View(vcf_list)
vcf_files
perc_removed <- (length(blacklist_df$Sample_name))/length(vcf_files)*100
print(perc_removed)
length(vcf_files)
write.csv(blacklist_df, file = "../../../1_Input/Burkitt_paper/blacklist_samples.csv", row.names = F)
